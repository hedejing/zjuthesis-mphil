%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 452.000000 465.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.14.1 (Build 18B75) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 452 465
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 452 465
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: Helvetica
%!FontType1-1.0: Helvetica 1.0000.0.0000
14 dict begin/FontName /Helvetica def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /p put
dup 34 /R put
dup 35 /P put
dup 36 /L put
dup 37 /equal put
dup 38 /two put
dup 39 /hyphen put
dup 40 /plus put
dup 41 /zero put
dup 42 /four put
dup 43 /space put
dup 44 /less put
dup 45 /s put
dup 46 /c put
dup 47 /r put
dup 48 /e put
dup 49 /n put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[2048 -1947 1 index div -985 2 index div 2961 3 index div 2297 5 -1 roll div]cvx def
/sfnts [<






640D1642357169FDCF04490000020076FE5504250449000E00220074402CA908A717022808201C110E061D15070F060E1D1C0B220E0227181A240A2E102E2129220F1923248721BD5D182B2B4EF43C4DFDE4E44E10F64DED003F3FED3F3FED1139123931304379401C161B00051A260426001B022601051602260101190E260003170626012B2B012B2B2B2B8181005D243635342726232207061514171633013315363736333212111007062322272627112302C6A72546BABB45252546BAFE2EAF36405B7BB6FEB7749A7952303BB479D3D2805CB1BB649A7C57A603B18E49283CFEE9FEFDFEA2965F351E49FDDD00000100890000029204470011004F40262703260D37034704040E0810020E0911090C270805070006110A081A13012E10291100191213B80145B321627E182B2B4EF43C4DFDE44E10E6003F3F4D3FC4FDC411123939011112393130005D1333153E0133321617152E0123220615112389AB15A46B05181D101B108892B4042FB9369B0203BE0302AF72FD980000020042FFD703B6044B002E002F012E408F38099805961299149815982A062824252736214621472447275624572766246726790C790D790E7623742474257426A61EA82C1303000B15052D042E13001A151B171C18152D142E280F0B6908262536250225220D0A042B1318C61C1D1307041D2E9A2B0B2F07090E100207002F212F1A1F18161827173E28260727281A310E1F27103E00272E193031B221A65D182B2B4EF44DEDF4FD394E10F64DFD3910F4FD3911123939392F111239113939003F3FEDED3FEDED111217397131304379404C012D022615251A26210E1F21000926072101032C002100052A0721011D121F21001B14182101200F22210021220E0D08270A21012625090A012D04210006290421001E111C210119161C2101002B2B2B2B103C103C2B103C103C2B012B2B2B2B2B2B2B2B2B81005D5D015D13161716333236353427262F01262726353436333217160723262726232206151417161F011617161514062322262701EF082544A864983D27738F894174DBB9F26B4302AA05263E99666945284E77C24269D9DEEFC70701B701505A3057575B4524161D24222A498198BC8E5A683D32474E40462A19131D2F2C45948FD0D9A002F90002002F0000044205930007000B00001335211521112311013521152F0413FE4FB2FE50041303A6A8A8FC5A03A60146A7A700000001000000000000D5411B0D5F0F3CF500110800000000005F4D8F0000000000D5670BEEF865FC270B9108F9000000090001000000000000000100000629FE2900000C01F865FCED0B91000100000000000000000000000000000013051200420239000004AC005C02AA005504730040047300400473003404AC001C04AC005C0473009C055600AF05C700B40400003B

62406245236144592B2B2B2B456953427374B8019A2045694B20B02853B049515A58B020615944B801A6204569447500
00>] def
/CharStrings 19 dict dup begin
/.notdef 0 def
/space 1 def
/plus 2 def
/hyphen 3 def
/zero 4 def
/two 5 def
/four 6 def
/less 7 def
/equal 8 def
/L 9 def
/P 10 def
/R 11 def
/c 12 def
/e 13 def
/n 14 def
/p 15 def
/r 16 def
/s 17 def
/u20B8 18 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.00048828125 0 0 0.00048828125 0 0 ] def
/FontBBox{-1947 -985 2961 2297}def
/UniqueID 4072461 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C5586B741EEB93F3C73016EC16BFF283758900903D203992EFC8BAFAF13579C602F38C91BD326F6E6A1837BE2706B92FCAA32341FE90C82594E2DAAEF640CEE7C829F74199BEB91DB68E41A499587CED5A856443AD12FA7631214AFE1C70F3E7FD54114126E2FEFAF34858ADC23924206EDD9FFF1C250C313D111342B0E65914AC504B2035C8F614E59B51D24BCEAE2517DCE1290EFA832F251A750198090ADFAF4AA457C13EBEDC9DD30429C2A2B3CC67B340090F0983883003DB56FD4B1E85BBB760A21C866A0928CC255CDF549930FF6ACCF8B6715D59C0FCD82F0BA5CD552DF7BFD916A7A1B92BB9E76DF6BCC856B749C378CB3F89968592DF2903B52E2D0C693DCF5F69D8E9E27A8DDC933BA260A347005B74A0F10B459BC0A800CE93B818BC2D9AAB18231368FFCF753C415D1F34164550B19DA5D3CD7FB59E52195E1994FE6295C1418862F8F9AE1A7BFEF79B1CDC90B54CE98DFACF4B88CB273FCAB994B5C202632826B564B17D1AE5D8D0264734B260F0753D550485C7F7C743A7104C72987A29B84F49B265E305B663494AB259AB2653F25A94654646C089B41461ADBFFD8DC16D1721727690AEE81E98BA4AF6C563363AC90ACA37F8A937641683D46629FD837F473FEA512ED6E5CCFC633D0493B7EDEFC9869C12F0926A323166D9B1E1FC2BF01EFF0D3B98A6D38DEF14A68EA3769C1B79D87CA90700DF3E298B84DDF52989779A13EB05E7C5C275BE402A9FF36206278904CBD018ABBBF1EF6089DE68387BEEE9D07584699D74596BD6E2080CE8BD3408D44C2DDDE789D6E8A2E59CD7BC
B66521A00E69E208F124EE77EB4C85BFB443DCE7A9CF7B9891436BEDEFF79BC488EB120898EE80D7047C6A54025EB16F42411528924CA31B1E18D93192711FFFB335F02EFDC112BD5424A0D9B4F643634F707AB1ED5E2468BC0B82E34BA13BD4D4D742939AEC7A5A8721212B7FFA0C3BB3D6E87477D798CAC4E3CE5B9B4FA54A5707A384B7D1C4EBC06EB710E6369D1399022953FE1E37C29ACD5773E385D029E0F3659290D76ED117E263D26DC9E7F20D6A3C6A2BB05E1EC0D1F1104403DCB1C8AAFA1C4D1A5ABC3321A037C9195F1946466FE8CCD261D4B52121A4455CD98BADCBBE2BE146FC672A649E369DD3C8794E26237C76C301486F46C18A761A0EE1E1AE70B5657F1F3B96A2210743B3D21820EB90A949F276BAF67557B5D4BB7E65E7C44E69323A1E9DF0D2FAD5D8EDEF5553601FA08A5F2D3488F12500AB26F7D914F61FD49ABCD6A948C394FE9252505EB301F3FB8E987A66899F815AB694C0E22597A99BCBC103171DDD97AD66D75D32C36B51B93CE9C6865744E1C73AB7D559C377469FF8D15EFFE90E08BA4B5A33896756D200885CD14ADCA28CC39BADED8210FC008AF30B3468F67988E40D0D9781C60014B15113BAB4F09F0FEBA3DDA3CA2F73B2ADEF5E7582C2B328D395E2316C96FFBE396524D4161E8E2ADD6A1A545579C163CF1F347E74B318ABFA705AC9245BD620A60B97836D32C68FECC2C6C8462B8AE932C87ECF3EC4FA6FFC21EDFBC3CC0045D817E7F21E5C61C2D15BA6DC7616F4031B3A40DCDC90C4A33B4CFE6F75AA05692D94537349C63755FB82DB548D745B2B3A47B94495F8C7255FD036642453424809D2F1649EF487855A642B5E91A30C56E220DCADB1116E27285AFF24286845B840E08CA3ADF9C4C4CB0BF3BB8F074D70492C19F39BBD27543A0214279E9077C5EADE6AD493BF137CE17C7E33B6A65D96582CE417AECF5A1C25453BF402DF716CC151F1779D98FF5988E974D5F674317602F17F334CC417C460A1F6CECA100CE349EB2F3D1549FA455604BC5ADB14AA4E69A537D1A36666CB58C720B32CBB9AF79F4D05F3014FF3942C3DE29C3B85C22330FD3CF83C8593254D4CFBA4340D327AD6CC68F9126558283F7BFA0270E58409561A5FEF509944DBE75CA8F62CE333BB4F95C846B09E9D6DA285106E39DF17A892CCB6FE2BCD36581FA83F69C9D1CB51C79FCBEBCD0BCDF717A016B3F56565BBE8E61917E6892D9506FE46B7DF564C6F791A591C005281D805414D5B603F43FAED5A9BAC8EBC60132FCBCA463CF3EFBC274C19A9736C5D017CFD81C81A9B0617FD6C6661669216584818EEB5A104C6BF1E34DAD83456741E06D2DCEA04F3D54FC7C38B29ABE0CC556D9DEDD19D29EB8153FCD6A0FA3FEFD29F7DD78C6263E719688D7FFDF79C4D9C237BBA22FC204C8E43FFEB3CD0D3B306A7EBE4DFF8

0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/Helvetica cguidfix
/F1.1/Helvetica renmfont
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
 exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
1 sc
q
0 0 452 465 rc
0 465 m
452 465 l
452 0 l
0 0 l
h
f
/Cs2 SC
1 1 1 sc
-1207.4073 1342.7778 m
2414.8147 1342.7778 l
2414.8147 -1290.5555 l
-1207.4073 -1290.5555 l
h
-1207.4073 1342.7778 m
f
333.85196 191.60023 m
319.38266 180.4006 319.38266 162.24242 333.85196 151.04277 c
348.32117 139.84308 371.78036 139.84308 386.24957 151.04277 c
400.71884 162.24242 400.71884 180.4006 386.24957 191.60023 c
371.78036 202.79994 348.32117 202.79994 333.85196 191.60023 c
f
3 w
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -121 483 cm
454.85196 291.39975 m
440.38266 302.5994 440.38266 320.7576 454.85196 331.95721 c
469.32117 343.15692 492.78036 343.15692 507.24957 331.95721 c
521.71887 320.7576 521.71887 302.5994 507.24957 291.39975 c
492.78036 280.20007 469.32117 280.20007 454.85196 291.39975 c
S
0 i
1 1 1 sc
CM
233.10959 154.8282 m
222.29678 144.01546 222.29678 126.48454 233.10959 115.6718 c
243.92233 104.859 261.45325 104.859 272.26599 115.6718 c
283.0788 126.48454 283.0788 144.01546 272.26599 154.8282 c
261.45325 165.64101 243.92233 165.64101 233.10959 154.8282 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -121 483 cm
354.10959 328.17178 m
343.29678 338.98456 343.29678 356.51544 354.10959 367.32822 c
364.92233 378.14099 382.45325 378.14099 393.26599 367.32822 c
404.0788 356.51544 404.0788 338.98456 393.26599 328.17178 c
382.45325 317.35901 364.92233 317.35901 354.10959 328.17178 c
S
0 i
1 1 1 sc
CM
309.7937 217.14844 m
311.16 228.3481 303.28787 235.689 292.21078 233.54477 c
281.1337 231.4006 271.04642 220.5833 269.68015 209.38364 c
268.31384 198.18396 276.186 190.84308 287.26306 192.9873 c
298.34015 195.13147 308.42746 205.94876 309.7937 217.14844 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -121 483 cm
430.7937 265.85156 m
432.16 254.6519 424.28787 247.311 413.21078 249.45523 c
402.1337 251.5994 392.04642 262.41672 390.68015 273.61636 c
389.31384 284.81604 397.186 292.15692 408.26306 290.0127 c
419.34015 287.86853 429.42746 277.05124 430.7937 265.85156 c
S
0 i
1 1 1 sc
CM
277.57507 350.00412 m
258.27997 420.62387 191.61824 447.55695 128.68188 410.16089 c
65.745445 372.76517 30.367449 285.20154 49.662891 214.582 c
68.958008 143.96225 135.61974 117.02917 198.55608 154.42525 c
261.49252 191.82095 296.87051 279.38458 277.57507 350.00412 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -121 483 cm
398.57507 132.99588 m
379.27997 62.376129 312.61823 35.443043 249.68188 72.839119 c
186.74544 110.23484 151.36745 197.79845 170.66289 268.418 c
189.95801 339.03775 256.61972 365.97083 319.55609 328.57477 c
382.49252 291.17905 417.87051 203.61543 398.57507 132.99588 c
S
0 i
1 1 1 sc
CM
40.898487 433 m
227.34773 433 l
227.34773 189 l
40.898487 189 l
h
40.898487 433 m
f
43 240.13162 m
130.44925 240.13162 l
130.44925 155.3125 l
43 155.3125 l
h
43 240.13162 m
f
0.60000002 i
1 0.80000001 0 sc
1 0 0 -1 -121 483 cm
381.20303 98 m
460.14151 98 l
460.14151 124 l
381.20303 124 l
h
381.20303 98 m
S
5 w
0.89803898 0.49019599 0.17254899 sc
161.89848 271.55554 m
374.26471 59.189342 l
S
0 i
CM
263.44705 433.99298 m
249.44632 427.62903 l
257.08307 419.99228 l
h
263.44705 433.99298 m
f
0 J
0 j
1 0 0 -1 -121 483 cm
384.44705 49.007004 m
370.44632 55.370964 l
378.08307 63.007717 l
h
384.44705 49.007004 m
S
3 w
1 J
1 j
[
12
12
] 0 d
0.60000002 i
0.64705902 0.64705902 0.64705902 sc
169.81024 441.62714 m
334.08826 318.0621 l
S
0 i
CM
215.85655 163.30396 m
213.55981 163.62881 211.96129 165.75403 212.28615 168.05077 c
212.61099 170.34749 214.73622 171.94603 217.03294 171.62117 c
219.32968 171.29633 220.92821 169.1711 220.60336 166.87436 c
220.2785 164.57764 218.15327 162.97911 215.85655 163.30396 c
f
0 J
0 j
[] 0 d
1 0 0 -1 -121 483 cm
336.85654 319.69604 m
334.55981 319.37119 332.9613 317.24597 333.28613 314.94925 c
333.61099 312.6525 335.73621 311.05399 338.03296 311.37881 c
340.32968 311.70367 341.92822 313.82889 341.60336 316.12564 c
341.2785 318.42236 339.15329 320.0209 336.85654 319.69604 c
S
CM
46.041939 43.006805 m
48.338669 42.68195 49.937195 40.556732 49.612347 38.259998 c
49.287491 35.963268 47.16227 34.364738 44.86554 34.68959 c
42.568802 35.014446 40.970276 37.139664 41.295132 39.436398 c
41.619984 41.733128 43.745209 43.331661 46.041939 43.006805 c
f
1 0 0 -1 -121 483 cm
167.04193 439.99319 m
169.33867 440.31805 170.93719 442.44327 170.61235 444.73999 c
170.28749 447.03674 168.16226 448.63525 165.86554 448.31039 c
163.5688 447.98557 161.97028 445.86035 162.29514 443.5636 c
162.61998 441.26688 164.74521 439.66833 167.04193 439.99319 c
S
4 w
1 J
1 j
0.60000002 i
0 0 0 sc
164 449 m
529.17358 446.79803 l
S
3 w
163.89848 392.99609 m
518.1015 392.99609 l
S
/Cs1 SC
0 sc
0 i
1 0 0 -1 414.05075 76 cm
/F1.1[ 20 0 0 -20 0 0]sf
-10.977783 4.5 m
(!)s
/F1.1[ 15 0 0 -15 0 0]sf
0.14526367 11.5 m
(")s
[
12
12
] 0 d
0.60000002 i
/Cs2 SC
0.64705902 0.64705902 0.64705902 sc
1 0 0 -1 -121 483 cm
517.18628 439.71765 m
398.17883 290.73511 l
S
0 i
CM
278.73148 195.07957 m
278.47363 192.77437 276.39587 191.11464 274.09064 191.37247 c
271.78543 191.63031 270.1257 193.7081 270.38354 196.01331 c
270.64139 198.31853 272.71915 199.97826 275.02438 199.72041 c
277.32959 199.46257 278.98932 197.3848 278.73148 195.07957 c
f
0 J
0 j
[] 0 d
1 0 0 -1 -121 483 cm
399.73148 287.92041 m
399.47363 290.22565 397.39587 291.88538 395.09064 291.62753 c
392.78543 291.36969 391.1257 289.2919 391.38354 286.98669 c
391.64139 284.68146 393.71915 283.02173 396.02438 283.27957 c
398.32959 283.53741 399.98932 285.6152 399.73148 287.92041 c
S
CM
394.63364 40.467655 m
394.89148 42.772873 396.96924 44.432602 399.27444 44.174763 c
401.57968 43.91692 403.23941 41.839142 402.98157 39.533928 c
402.72372 37.228706 400.64594 35.568977 398.34073 35.82682 c
396.03552 36.084663 394.37579 38.162441 394.63364 40.467655 c
f
1 0 0 -1 -121 483 cm
515.63361 442.53235 m
515.89148 440.22711 517.96924 438.56741 520.27448 438.82523 c
522.57965 439.08307 524.23938 441.16086 523.98157 443.46606 c
523.72369 445.7713 521.64594 447.43103 519.3407 447.17319 c
517.03552 446.91534 515.37579 444.83755 515.63361 442.53235 c
S
1 J
1 j
[
12
12
] 0 d
0.60000002 i
516.99768 441.83978 m
389.73975 327.61298 l
S
0 i
CM
269.80807 158.41884 m
269.93304 156.10262 268.15671 154.12363 265.84048 153.99863 c
263.52426 153.87364 261.54526 155.64999 261.42029 157.96622 c
261.29529 160.28244 263.07162 162.26143 265.38785 162.38643 c
267.70407 162.51141 269.68307 160.73506 269.80807 158.41884 c
f
0 J
0 j
[] 0 d
1 0 0 -1 -121 483 cm
390.80807 324.58115 m
390.93304 326.89737 389.15671 328.87637 386.84048 329.00137 c
384.52426 329.12637 382.54526 327.35001 382.42029 325.03378 c
382.29529 322.71756 384.07162 320.73856 386.38785 320.61359 c
388.70407 320.48859 390.68307 322.26492 390.80807 324.58115 c
S
CM
394.92938 38.128395 m
394.80438 40.444618 396.58072 42.423615 398.89694 42.548607 c
401.21317 42.673595 403.19217 40.897243 403.31717 38.581024 c
403.44214 36.264797 401.6658 34.285801 399.34958 34.160812 c
397.03336 34.03582 395.05435 35.812176 394.92938 38.128395 c
f
1 0 0 -1 -121 483 cm
515.92938 444.87161 m
515.80438 442.55539 517.58075 440.57639 519.89697 440.45139 c
522.2132 440.32642 524.1922 442.10275 524.31714 444.41898 c
524.44214 446.7352 522.66583 448.7142 520.34955 448.8392 c
518.03339 448.96417 516.05438 447.18784 515.92938 444.87161 c
S
1 J
1 j
[
12
12
] 0 d
0.60000002 i
517.99768 442.83978 m
390.73975 328.61298 l
S
0 i
CM
270.80807 157.41884 m
270.93304 155.10262 269.15671 153.12363 266.84048 152.99863 c
264.52426 152.87364 262.54526 154.64999 262.42029 156.96622 c
262.29529 159.28244 264.07162 161.26143 266.38785 161.38643 c
268.70407 161.51141 270.68307 159.73506 270.80807 157.41884 c
f
0 J
0 j
[] 0 d
1 0 0 -1 -121 483 cm
391.80807 325.58115 m
391.93304 327.89737 390.15671 329.87637 387.84048 330.00137 c
385.52426 330.12637 383.54526 328.35001 383.42029 326.03378 c
383.29529 323.71756 385.07162 321.73856 387.38785 321.61359 c
389.70407 321.48859 391.68307 323.26492 391.80807 325.58115 c
S
CM
395.92938 37.128395 m
395.80438 39.444618 397.58072 41.423615 399.89694 41.548607 c
402.21317 41.673595 404.19217 39.897243 404.31717 37.581024 c
404.44214 35.264797 402.6658 33.285801 400.34958 33.160812 c
398.03336 33.03582 396.05435 34.812176 395.92938 37.128395 c
f
1 0 0 -1 -121 483 cm
516.92938 445.87161 m
516.80438 443.55539 518.58075 441.57639 520.89697 441.45139 c
523.2132 441.32642 525.1922 443.10275 525.31714 445.41898 c
525.44214 447.7352 523.66583 449.7142 521.34955 449.8392 c
519.03339 449.96417 517.05438 448.18784 516.92938 445.87161 c
S
/Cs1 SC
0 sc
1 0 0 -1 183.94925 179.5 cm
/F1.1[ 20 0 0 -20 0 0]sf
-10.841064 4.5 m
(#)s
/F1.1[ 15 0 0 -15 0 0]sf
2.4987793 11.5 m
($)s
1 J
1 j
0.60000002 i
/Cs2 SC
1 0.80000001 0 sc
1 0 0 -1 -121 483 cm
413.92392 242.75 m
492.86243 242.75 l
492.86243 268.75 l
413.92392 268.75 l
h
413.92392 242.75 m
S
350 300.59283 m
428.93851 300.59283 l
428.93851 334.59283 l
350 334.59283 l
h
350 300.59283 m
S
[
12
12
] 0 d
0.64705902 0.64705902 0.64705902 sc
518.20319 444.655 m
216.23485 231.01886 l
S
0 i
CM
95.945854 255.11606 m
96.337532 252.82977 94.801651 250.65884 92.515366 250.26717 c
90.22908 249.87549 88.058151 251.41138 87.666473 253.69765 c
87.274788 255.98393 88.810669 258.15488 91.096962 258.54654 c
93.38324 258.93823 95.554169 257.40234 95.945854 255.11606 c
f
0 J
0 j
[] 0 d
1 0 0 -1 -121 483 cm
216.94585 227.88394 m
217.33752 230.17023 215.80165 232.34116 213.51537 232.73283 c
211.22908 233.12451 209.05815 231.58862 208.66647 229.30235 c
208.2748 227.01607 209.81067 224.84514 212.09695 224.45346 c
214.38324 224.06178 216.55417 225.59766 216.94585 227.88394 c
S
CM
396.49219 35.210083 m
396.10052 37.496368 397.63638 39.66729 399.92267 40.058975 c
402.20895 40.450657 404.37988 38.914772 404.77158 36.62849 c
405.16327 34.342201 403.62738 32.17128 401.34109 31.779596 c
399.05481 31.387917 396.88388 32.923801 396.49219 35.210083 c
f
1 0 0 -1 -121 483 cm
517.49219 447.78992 m
517.10052 445.50363 518.63641 443.3327 520.92267 442.94101 c
523.20898 442.54935 525.37988 444.08524 525.77155 446.37152 c
526.16327 448.65781 524.62738 450.82874 522.34106 451.2204 c
520.05481 451.61209 517.88385 450.0762 517.49219 447.78992 c
S
1 J
1 j
[
12
12
] 0 d
0.60000002 i
520.47076 442.89542 m
246.93269 200.49663 l
S
0 i
CM
126.9817 285.54193 m
127.12144 283.22656 125.35773 281.2363 123.04235 281.09653 c
120.72697 280.95679 118.7367 282.72049 118.59695 285.03589 c
118.45721 287.35126 120.22091 289.34152 122.53629 289.48126 c
124.85167 289.62103 126.84195 287.8573 126.9817 285.54193 c
f
0 J
0 j
[] 0 d
1 0 0 -1 -121 483 cm
247.98169 197.45807 m
248.12143 199.77344 246.35773 201.76372 244.04236 201.90346 c
241.72697 202.04321 239.73669 200.2795 239.59695 197.96413 c
239.45721 195.64874 241.22092 193.65846 243.5363 193.51872 c
245.85167 193.37898 247.84195 195.14268 247.98169 197.45807 c
S
CM
398.42178 37.066032 m
398.28204 39.381413 400.04575 41.371685 402.36111 41.511433 c
404.67648 41.651176 406.66678 39.88747 406.80652 37.572094 c
406.94626 35.25671 405.18256 33.266438 402.86719 33.126694 c
400.55179 32.98695 398.56152 34.750656 398.42178 37.066032 c
f
1 0 0 -1 -121 483 cm
519.42175 445.93396 m
519.28204 443.61859 521.04572 441.62833 523.36108 441.48856 c
525.67651 441.34882 527.66675 443.11252 527.80652 445.42792 c
527.94629 447.74329 526.18256 449.73355 523.86719 449.87332 c
521.55182 450.01306 519.56152 448.24933 519.42175 445.93396 c
S
1 J
1 j
[
12
12
] 0 d
0.60000002 i
518.06854 440.66794 m
289.72137 157.65407 l
S
0 i
CM
170.26024 328.16818 m
170.01367 325.86176 167.94403 324.19186 165.63757 324.43845 c
163.33113 324.685 161.66125 326.75464 161.90784 329.0611 c
162.1544 331.36755 164.22403 333.03741 166.53049 332.79086 c
168.83693 332.54428 170.50681 330.47464 170.26024 328.16818 c
f
0 J
0 j
[] 0 d
1 0 0 -1 -121 483 cm
291.26022 154.8318 m
291.01367 157.13826 288.94403 158.80812 286.63757 158.56155 c
284.33115 158.31499 282.66125 156.24535 282.90784 153.9389 c
283.15439 151.63245 285.22403 149.96259 287.53049 150.20915 c
289.83694 150.45572 291.50681 152.52536 291.26022 154.8318 c
S
CM
395.52966 39.5098 m
395.77625 41.81625 397.84586 43.486118 400.15231 43.239552 c
402.45877 42.992981 404.12863 40.92334 403.88208 38.616894 c
403.6355 36.31044 401.56586 34.640575 399.2594 34.887142 c
396.95297 35.133713 395.28308 37.203354 395.52966 39.5098 c
f
1 0 0 -1 -121 483 cm
516.52966 443.4902 m
516.77625 441.18375 518.84589 439.51389 521.15234 439.76044 c
523.45874 440.00702 525.12866 442.07666 524.88208 444.38312 c
524.6355 446.68958 522.56586 448.35944 520.2594 448.11285 c
517.95294 447.86627 516.28308 445.79666 516.52966 443.4902 c
S
1 J
1 j
[
12
12
] 0 d
0.60000002 i
520.02502 440.85614 m
449.18008 325.47366 l
S
0 i
CM
330.06729 160.1286 m
329.52774 157.87263 327.26154 156.48117 325.00555 157.02071 c
322.7496 157.56024 321.35815 159.82645 321.89767 162.08243 c
322.43719 164.33839 324.7034 165.72986 326.95938 165.19032 c
329.21536 164.65079 330.60681 162.38457 330.06729 160.1286 c
f
0 J
0 j
[] 0 d
1 0 0 -1 -121 483 cm
451.06729 322.8714 m
450.52774 325.12738 448.26154 326.51883 446.00555 325.97931 c
443.7496 325.43976 442.35815 323.17355 442.89767 320.91757 c
443.43719 318.66159 445.7034 317.27014 447.95938 317.80969 c
450.21536 318.34921 451.60681 320.61542 451.06729 322.8714 c
S
CM
397.13782 39.541595 m
397.67734 41.797569 399.94354 43.189022 402.19952 42.649494 c
404.45551 42.109962 405.84695 39.84375 405.30743 37.587776 c
404.76788 35.331802 402.50168 33.94035 400.2457 34.479881 c
397.98975 35.019413 396.5983 37.285625 397.13782 39.541595 c
f
1 0 0 -1 -121 483 cm
518.13782 443.4584 m
518.67737 441.20242 520.94354 439.81097 523.19952 440.35049 c
525.45551 440.89005 526.84698 443.15625 526.30743 445.41223 c
525.76788 447.66821 523.50171 449.05966 521.24573 448.52011 c
518.98975 447.98059 517.59827 445.71439 518.13782 443.4584 c
S
1 J
1 j
[
12
12
] 0 d
0.60000002 i
520.90466 441.80106 m
323.44748 123.63873 l
S
0 i
CM
204.32217 361.97253 m
203.79346 359.71402 201.53395 358.31171 199.27541 358.84042 c
197.01688 359.36914 195.61458 361.62866 196.1433 363.88721 c
196.67201 366.14572 198.93153 367.54803 201.19006 367.01932 c
203.44859 366.4906 204.85089 364.23108 204.32217 361.97253 c
f
0 J
0 j
[] 0 d
1 0 0 -1 -121 483 cm
325.32217 121.02745 m
324.79346 123.28599 322.53394 124.68828 320.27542 124.15957 c
318.01688 123.63085 316.61459 121.37133 317.14331 119.1128 c
317.67203 116.85426 319.93152 115.45197 322.19006 115.98069 c
324.44861 116.5094 325.85089 118.76892 325.32217 121.02745 c
S
CM
398.02994 38.587669 m
398.55865 40.846203 400.81818 42.248497 403.07672 41.71978 c
405.33524 41.191067 406.73755 38.931545 406.20883 36.673016 c
405.68011 34.414478 403.42059 33.012184 401.16205 33.540901 c
398.90353 34.069618 397.50122 36.32914 398.02994 38.587669 c
f
1 0 0 -1 -121 483 cm
519.02997 444.41232 m
519.55865 442.15381 521.81818 440.7515 524.07672 441.28021 c
526.33527 441.80893 527.73755 444.06845 527.2088 446.327 c
526.68011 448.58551 524.42059 449.98782 522.16205 449.45911 c
519.9035 448.93039 518.50122 446.67087 519.02997 444.41232 c
S
1 J
1 j
[
12
12
] 0 d
0.60000002 i
522.67572 442.24915 m
433.30786 260.55029 l
S
0 i
CM
314.4299 224.86432 m
313.68198 222.66861 311.29572 221.49493 309.09998 222.24283 c
306.90427 222.99074 305.73059 225.37701 306.47852 227.57272 c
307.22641 229.76845 309.61267 230.94212 311.80841 230.19421 c
314.00412 229.44632 315.1778 227.06003 314.4299 224.86432 c
f
0 J
0 j
[] 0 d
1 0 0 -1 -121 483 cm
435.4299 258.13568 m
434.68198 260.33139 432.29572 261.50507 430.09998 260.75717 c
427.90427 260.00928 426.73059 257.62299 427.47852 255.42728 c
428.22641 253.23155 430.61267 252.05788 432.80841 252.80579 c
435.00412 253.55368 436.1778 255.93997 435.4299 258.13568 c
S
CM
399.55371 38.33625 m
400.30161 40.53196 402.6879 41.705639 404.88361 40.957737 c
407.07932 40.209831 408.25299 37.823551 407.5051 35.627842 c
406.75717 33.432125 404.37091 32.258446 402.1752 33.006351 c
399.97949 33.754257 398.80582 36.140541 399.55371 38.33625 c
f
1 0 0 -1 -121 483 cm
520.55371 444.66376 m
521.30164 442.46805 523.68787 441.29437 525.88361 442.04227 c
528.07928 442.79016 529.25299 445.17645 528.50507 447.37216 c
527.7572 449.56787 525.37091 450.74155 523.17517 449.99365 c
520.97949 449.24573 519.80579 446.85947 520.55371 444.66376 c
S
1 J
1 j
[
12
12
] 0 d
0.60000002 i
523.54431 443.19461 m
350.42557 96.307388 l
S
0 i
CM
231.53357 389.11948 m
230.7984 386.91946 228.41896 385.73196 226.21895 386.46713 c
224.01895 387.2023 222.83145 389.58176 223.56662 391.78177 c
224.30179 393.98178 226.68123 395.16925 228.88124 394.43408 c
231.08124 393.69891 232.26874 391.31949 231.53357 389.11948 c
f
0 J
0 j
[] 0 d
1 0 0 -1 -121 483 cm
352.53357 93.880531 m
351.7984 96.080536 349.41898 97.268028 347.21896 96.53286 c
345.01895 95.797691 343.83145 93.418251 344.56662 91.218246 c
345.30179 89.018234 347.68121 87.830742 349.88123 88.565918 c
352.08124 89.301086 353.26874 91.680527 352.53357 93.880531 c
S
CM
400.43634 37.378525 m
401.17151 39.578529 403.55093 40.766018 405.75095 40.030853 c
407.95096 39.295685 409.13846 36.916245 408.40329 34.71624 c
407.66809 32.516228 405.28867 31.328737 403.08865 32.063908 c
400.88864 32.799076 399.70117 35.178516 400.43634 37.378525 c
f
1 0 0 -1 -121 483 cm
521.43634 445.62149 m
522.17151 443.42148 524.55096 442.23398 526.75092 442.96915 c
528.95093 443.70432 530.13843 446.08377 529.40326 448.28375 c
528.66809 450.48376 526.2887 451.67126 524.08868 450.9361 c
521.88867 450.20093 520.70117 447.82147 521.43634 445.62149 c
S
1 J
1 j
[
12
12
] 0 d
0.60000002 i
523.40082 441.92792 m
393.80426 114.58707 l
S
0 i
CM
275.11276 370.64993 m
274.1915 368.52112 271.71893 367.54221 269.59012 368.46347 c
267.46133 369.38474 266.48242 371.8573 267.40369 373.98611 c
268.32495 376.1149 270.79752 377.09381 272.9263 376.17255 c
275.05511 375.25128 276.034 372.77872 275.11276 370.64993 c
f
0 J
0 j
[] 0 d
1 0 0 -1 -121 483 cm
396.11276 112.35007 m
395.1915 114.47887 392.71893 115.45778 390.59012 114.53652 c
388.46133 113.61526 387.48242 111.14269 388.40369 109.01389 c
389.32495 106.88509 391.79752 105.90619 393.9263 106.82745 c
396.05511 107.7487 397.034 110.22128 396.11276 112.35007 c
S
CM
400.09235 38.835091 m
401.01361 40.96389 403.48618 41.942795 405.61499 41.021538 c
407.74377 40.100281 408.72269 37.627708 407.80142 35.498909 c
406.88016 33.370106 404.40759 32.391201 402.27881 33.312462 c
400.14999 34.233719 399.17108 36.706291 400.09235 38.835091 c
f
1 0 0 -1 -121 483 cm
521.09235 444.16492 m
522.01361 442.0361 524.48615 441.05719 526.61499 441.97845 c
528.74377 442.89972 529.72266 445.37228 528.80145 447.5011 c
527.88019 449.62988 525.40759 450.6088 523.27881 449.68753 c
521.15002 448.76627 520.17108 446.2937 521.09235 444.16492 c
S
1 J
1 j
[
12
12
] 0 d
0.60000002 i
519.13568 445.55743 m
452.9599 398.52313 l
S
0 i
CM
332.6777 87.610237 m
333.06442 85.323105 331.5238 83.155533 329.23669 82.768822 c
326.94955 82.382111 324.78198 83.922722 324.39526 86.209846 c
324.00854 88.496979 325.54916 90.664558 327.8363 91.051262 c
330.12341 91.437973 332.29102 89.897369 332.6777 87.610237 c
f
0 J
0 j
[] 0 d
1 0 0 -1 -121 483 cm
453.6777 395.38977 m
454.06442 397.67688 452.5238 399.84448 450.23669 400.23117 c
447.94955 400.61789 445.78198 399.07727 445.39526 396.79016 c
445.00854 394.50302 446.54916 392.33545 448.8363 391.94873 c
451.12341 391.56204 453.29102 393.10263 453.6777 395.38977 c
S
CM
397.41785 34.309208 m
397.03113 36.59634 398.57172 38.763912 400.85886 39.150623 c
403.146 39.537331 405.31357 37.996723 405.70029 35.709595 c
406.08698 33.422462 404.54639 31.254887 402.25925 30.868179 c
399.97214 30.481474 397.80453 32.022079 397.41785 34.309208 c
f
1 0 0 -1 -121 483 cm
518.41785 448.6908 m
518.03113 446.40366 519.57172 444.23608 521.85889 443.84937 c
524.146 443.46268 526.3136 445.00327 526.70026 447.29041 c
527.08698 449.57755 525.54639 451.74512 523.25928 452.13184 c
520.97211 452.51852 518.80457 450.97794 518.41785 448.6908 c
S
1 J
1 j
[
12
12
] 0 d
0.60000002 i
524.27875 442.86469 m
375.15408 71.17437 l
S
0 i
CM
256.45233 414.07315 m
255.5408 411.94019 253.07274 410.94998 250.93974 411.86148 c
248.80676 412.77298 247.81654 415.24106 248.72806 417.37405 c
249.63959 419.50705 252.10764 420.49725 254.24063 419.58572 c
256.37363 418.67422 257.36383 416.20615 256.45233 414.07315 c
f
0 J
0 j
[] 0 d
1 0 0 -1 -121 483 cm
377.45233 68.926842 m
376.5408 71.05983 374.07275 72.050034 371.93976 71.138519 c
369.80676 70.227005 368.81656 67.758934 369.72806 65.625946 c
370.63959 63.492954 373.10764 62.50275 375.24063 63.414268 c
377.37363 64.325783 378.36383 66.793854 377.45233 68.926842 c
S
CM
400.98053 37.887794 m
401.89206 40.020786 404.36011 41.01099 406.4931 40.099476 c
408.6261 39.187962 409.6163 36.719894 408.7048 34.586903 c
407.79327 32.453911 405.32523 31.463707 403.19223 32.375221 c
401.05923 33.286736 400.06903 35.754807 400.98053 37.887794 c
f
1 0 0 -1 -121 483 cm
521.98053 445.11221 m
522.89209 442.97922 525.36011 441.98901 527.4931 442.90051 c
529.6261 443.81204 530.61633 446.28012 529.70477 448.41309 c
528.79327 450.54608 526.3252 451.53629 524.1922 450.62479 c
522.05927 449.71326 521.06903 447.24521 521.98053 445.11221 c
S
1 J
1 j
[
12
12
] 0 d
0.60000002 i
524.24811 442.87701 m
507.15417 400.67865 l
S
0 i
CM
388.44492 84.576523 m
387.5405 82.440506 385.07578 81.44207 382.93973 82.346458 c
380.80371 83.250854 379.8053 85.715607 380.70969 87.851624 c
381.61407 89.987648 384.07883 90.986076 386.21484 90.081688 c
388.35086 89.177292 389.3493 86.71254 388.44492 84.576523 c
f
0 J
0 j
[] 0 d
1 0 0 -1 -121 483 cm
509.44492 398.42346 m
508.5405 400.55951 506.07578 401.55792 503.93973 400.65353 c
501.80371 399.74915 500.8053 397.28439 501.70969 395.14838 c
502.61407 393.01236 505.07883 392.01392 507.21484 392.9183 c
509.35086 393.82269 510.3493 396.28745 509.44492 398.42346 c
S
CM
400.95743 37.867786 m
401.86182 40.003807 404.32657 41.002239 406.46259 40.097851 c
408.5986 39.193459 409.59705 36.728706 408.69266 34.59269 c
407.78824 32.456665 405.32352 31.458231 403.18747 32.362625 c
401.05145 33.267017 400.05304 35.73177 400.95743 37.867786 c
f
1 0 0 -1 -121 483 cm
521.9574 445.1322 m
522.86182 442.99619 525.32654 441.99777 527.46259 442.90216 c
529.59857 443.80655 530.59705 446.2713 529.69263 448.40732 c
528.78827 450.54333 526.32349 451.54178 524.1875 450.63736 c
522.05145 449.73297 521.05304 447.26822 521.9574 445.1322 c
S
5 w
1 J
1 j
0.60000002 i
0.89803898 0.49019599 0.17254899 sc
344 313 m
344 313 385.47339 273.49652 398.77777 216.14815 c
406.72922 181.87354 402.38425 150.85736 397.60071 131.44742 c
S
0 i
CM
272.23468 365.27908 m
271.45349 349.91974 l
281.74542 353.19333 l
h
272.23468 365.27908 m
f
0 J
0 j
1 0 0 -1 -121 483 cm
393.23468 117.7209 m
392.45349 133.08026 l
402.74542 129.80669 l
h
393.23468 117.7209 m
S
0.68627453 0.32156864 0.87058824 sc
1 0 0 -1 67.5 284 cm
/F1.1[ 20 0 0 -20 0 0]sf
-11.401367 7 m
(%&)[ 11.679688 0.000000 ] xS
1 0 0 -1 103.05076 312.79431 cm
-8.8916016 7 m
('&)[ 6.660156 0.000000 ] xS
1 0 0 -1 149.05075 353 cm
-11.401367 7 m
(\(&)[ 11.679688 0.000000 ] xS
1 0 0 -1 183.94925 387 cm
-11.401367 7 m
(\(&)[ 11.679688 0.000000 ] xS
0 0.47843137 1 sc
1 0 0 -1 112.05076 267.5 cm
-5.5615234 7 m
(&)s
1 0 0 -1 153.05075 301.5 cm
-5.5615234 7 m
(\))s
1 0 0 -1 194.05075 335.5 cm
-5.5615234 7 m
(&)s
1 0 0 -1 223.15227 360.61777 cm
-5.5615234 7 m
(*)s
1 0 0 -1 252.68779 377.61777 cm
-5.5615234 7 m
(&)s
0.15686275 0.80392158 0.25490198 sc
1 0 0 -1 303.29889 372 cm
-22.519531 7 m
(&+%+&)[ 11.123047 5.556641 11.679688 5.556641 0.000000 ] xS
0.68627453 0.32156864 0.87058824 sc
1 0 0 -1 215.05075 416 cm
-8.8916016 7 m
('&)[ 6.660156 0.000000 ] xS
1 0.23137255 0.1882353 sc
1 0 0 -1 339.3924 227.25 cm
-22.519531 7 m
(&+,+*)[ 11.123047 5.556641 11.679688 5.556641 0.000000 ] xS
1 0 0 -1 266.05075 172.3125 cm
-22.519531 7 m
(\)+,+&)[ 11.123047 5.556641 11.679688 5.556641 0.000000 ] xS
/Cs1 SC
0 sc
1 0 0 -1 77.949242 76 cm
-30.014648 7 m
(-./001)[ 10.000000 10.000000 6.660156 11.123047 11.123047 0.000000 ] xS
1 0 0 -1 48.050755 17 cm
-5.5615234 7 m
($)s
1 0 0 -1 409.05075 17 cm
-7.2216797 7 m
(")s
1 0 0 -1 320.05075 76 cm
-9.732666 4.5 m
(!)s
/F1.1[ 15 0 0 -15 0 0]sf
1.3903809 11.5 m
($)s
1 0 0 -1 281.05075 403.5 cm
/F1.1[ 20 0 0 -20 0 0]sf
-12.086182 4.5 m
(#)s
/F1.1[ 15 0 0 -15 0 0]sf
1.2536621 11.5 m
(")s
ep
end
%%Trailer
%%EOF
