%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 459.000000 465.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.14.1 (Build 18B75) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 459 465
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 459 465
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: Helvetica
%!FontType1-1.0: Helvetica 1.0000.0.0000
14 dict begin/FontName /Helvetica def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /p put
dup 34 /R put
dup 35 /P put
dup 36 /L put
dup 37 /equal put
dup 38 /two put
dup 39 /space put
dup 40 /s put
dup 41 /c put
dup 42 /r put
dup 43 /e put
dup 44 /n put
dup 45 /B put
dup 46 /A put
dup 47 /t put
dup 48 /o put
dup 49 /a put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[2048 -1947 1 index div -985 2 index div 2961 3 index div 2297 5 -1 roll div]cvx def
/sfnts [<









00>] def
/CharStrings 19 dict dup begin
/.notdef 0 def
/space 1 def
/two 2 def
/equal 3 def
/A 4 def
/B 5 def
/L 6 def
/P 7 def
/R 8 def
/a 9 def
/c 10 def
/e 11 def
/n 12 def
/o 13 def
/p 14 def
/r 15 def
/s 16 def
/t 17 def
/u20B8 18 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.00048828125 0 0 0.00048828125 0 0 ] def
/FontBBox{-1947 -985 2961 2297}def
/UniqueID 4072461 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C5586B741EEB93F3C73016EC16BFF283758900903D203992EFC8BAFAF13579C602F38C91BD326F6E6A1837BE2706B92FCAA32341FE90C82594E2DAAEF640CEE7C829F74199BEB91DB68E41A499587CED5A856443AD12FA7631214AFE1C70F3E7FD54114126E2FEFAF34858ADC23924206EDD9FFF1C250C313D111342B0E65914AC504B2035C8F614E59B51D24BCEAE2517DCE1290EFA832F251E24E250A6849044ECB764F66F5E82FFEF4E52D892C67AF61F59BB6988D8DD7AB58E6EA0B660F4EB638818449D9E3C03F3ECEC8EDD9931D54F03F15EDADFA3A18AD76406B9722FAB2171DE1359243C890C73E3A75393C2B8A15D5CC21C9AC5439E8F52960FE933C376E0F47F3731EC799742C5BA60CC490D77FD2F57CCCCE44418939002CFEF0042DCE564785B14F723230591C47C7DB9E3BDE0372A04E8D251F2EDDB61B03A42C0BE269C90FDC251ED905FFDE6E59A793138EF1311E0FC0DDFCD70578E57A1F47E1CD1864CB193227071EEBCC36E473F8FB557C7131AEEC6EA815EDD6BAD30E3D244E0434B0788D6CEE75B91DBFD755D4655CD8351F901AF2ADCFEDB9B0080923B307AAE741C65ED1B772C3B5149E51072D64206DF8C600E31FB73DEE1061D46A3E8FF7BBA8C66969321A3E8AEFAF7A702AA980E8D871C24639AA73D7481AA5AC6132FF552951F706D37DDBBB52DE706CCE406DF942DA250DCABB99861B21AC6A7570977CC4AB223BC0963E98618C01D1CB3D0F088A75780A3092CD74B6BBB77D0BD081780BB4F2EA5D395D32DF01DA367D6CFED3170E2B90FF58EE20C7FEF4B27B3EB7D
4D32FCC5B31F0AE0CD82FC386428775DC85FA63310808C44FA86FC3773F3F06F5B729410B4AFDE6E93D6E7E08ABAC8EAF0B41FD38D68F3C5902AE87B8FC6F54719C41615DA9560F88B07F4A84C35CBF8CBE976DD80DD4E1A51DAB32F048526E12DC1C5115AC52F9E2C34B3D7162125ACDE987EF75104453EFCB10C93E10CBB6E245CC7315AA8CF35DC67714ED0E9A1F418D05C8C28AD8A662BD02212E1D40E531D368AC6F10BF9CE78FBF10D779BA0E61032995CF4BE30F446C9D782C8969BBAD1C3ACD42289D10E0A4F96E6A5C93E421B88C19605B44DA8EE60A4640F1A78B64083529EB7C135C77AC4674BC117C2EECCD34481C8D43DB34935982908A5F9385A07C0E74DD21D18E170CA77D4F8D06C50BA442F15768F18ED881238964B061DE5702BECAF25A831C0615D50D5FAE9144D7863F6E3A6B72DE3C749DADBD0A35F5793C4E3B5F46E861EAA6CFB5A90C6239AE325DF6CC837316516B11B7D726A672ADD60543301D6D745C2D7B630CA9AF94F6D13C8252E3533C65873F1F8D697FF770A1ECB36D81837BB6234368D5DFD290348185376DE396B854D9C90EFE57839AE1333D1185DE3294B3C5B3D9F6B89FEFE14A9C2BCD35D969779730F8F08E4540B0CD06B446D43A0AB767FDB928FB17035A4E06EB27EA39FBF4EC3E220A3C575B37942569E4D4F146D865439E1C381AED12B67B354B461951B97C0CA7404C727069CD768B2581CD59AD5860ED932E7C3FD33E27A69B214E2586197587C635A621B19A77C1011EFAFD6CB5F91F73B180E70E372159C4836E688E20A6311C2C873FB31A4C23421D382E4BEA50BF03822337F86359AC4C91828C9A10E178030B7DA622E91C19D6AA8CCFBB986AAC90A7E9BEEB0ADF06D5223949BDC372AA5E3B5836C97F02B723A8361B44B2746BE92EE6970067C0CA6ED6D27C7DF87CABC68086519A0F726E20AC15EEC92D9E0FF8F55E2C909F42131D87C9E1ED04C6AC4067A287BFD373623233E49528EBC171B4FF6159989555509C299DFD78184BD95BCEED65CF9638DD348115CC7DCADDB5C82D3808984A1A0C5E4F3DB71D67A65214F17B8A8793DCB602922A2586C0A281917F6FC8C7CC334A475B1269881EA7AF8E6F291A802E962163D82215E865B30A7CD3D1215574C6BEE59E9CC3E8198FDFBD167E5D5F90FE6180804C8831F5DA5E47CA3B7D57C9888375CD58B9E019A854FC5CB494467989A91128B32278165F2E8E263CA2B25D32C7A5144B7FD867E47AE7DAF0CFD6291C4B7F435B9057F9CB7C29AE1B32C2DB1412948FE418B0F58D5241BF953FE151C22CA5B4D1587249C2014A0FE9C4DBF243F524DF2377A131A72E67F5DA5943F49EF3F7202CF35C86FF822F7E6D934F279CC624F49293C5CA666BC08C0DFF0EF739F0B61C3149601CE37215F499767DCB73FC9ABC104A0B1C0AB6A3FB1DE

16739E38C9A82AD72ABE2F97FD9688B885BECDC73B25A54FA42A6CCEDF1085B866CA8D5444D9CBC80D865CE11434E198AFE5B43722B2E8BD6871127672CADA00343ED1E8C504FCAB8EFE6DFC5DAB459040288812
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/Helvetica cguidfix
/F1.1/Helvetica renmfont
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
 exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
1 sc
q
0 0 459 465 rc
0 465 m
459 465 l
459 0 l
0 0 l
h
f
/Cs2 SC
1 1 1 sc
-723.80951 1089.4897 m
1447.619 1089.4897 l
1447.619 -783.97961 l
-723.80951 -783.97961 l
h
-723.80951 1089.4897 m
f
319.56046 160.77873 m
302.48486 149.5791 302.48486 131.4209 319.56046 120.22127 c
336.63599 109.02157 364.32083 109.02157 381.39633 120.22127 c
398.47195 131.4209 398.47195 149.5791 381.39633 160.77873 c
364.32083 171.97842 336.63599 171.97842 319.56046 160.77873 c
f
3 w
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -114 483 cm
433.56046 322.22125 m
416.48486 333.4209 416.48486 351.5791 433.56046 362.77875 c
450.63599 373.97842 478.32083 373.97842 495.39633 362.77875 c
512.47192 351.5791 512.47192 333.4209 495.39633 322.22125 c
478.32083 311.02158 450.63599 311.02158 433.56046 322.22125 c
S
0 i
1 1 1 sc
CM
235.38687 157.21909 m
226.15312 147.98538 226.15312 133.01462 235.38687 123.78091 c
244.62056 114.54716 259.59134 114.54716 268.82504 123.78091 c
278.05878 133.01462 278.05878 147.98538 268.82504 157.21909 c
259.59134 166.45284 244.62056 166.45284 235.38687 157.21909 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -114 483 cm
349.38687 325.78091 m
340.15311 335.01462 340.15311 349.98538 349.38687 359.21909 c
358.62057 368.45285 373.59134 368.45285 382.82504 359.21909 c
392.05878 349.98538 392.05878 335.01462 382.82504 325.78091 c
373.59134 316.54715 358.62057 316.54715 349.38687 325.78091 c
S
0 i
1 1 1 sc
CM
284.57507 350.00412 m
265.27997 420.62387 198.61824 447.55695 135.68188 410.16089 c
72.745445 372.76517 37.367451 285.20154 56.662891 214.582 c
75.958008 143.96225 142.61974 117.02917 205.55608 154.42525 c
268.49252 191.82095 303.87051 279.38458 284.57507 350.00412 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -114 483 cm
398.57507 132.99588 m
379.27997 62.376129 312.61823 35.443043 249.68188 72.839119 c
186.74544 110.23484 151.36745 197.79845 170.66289 268.418 c
189.95801 339.03775 256.61972 365.97083 319.55609 328.57477 c
382.49252 291.17905 417.87051 203.61543 398.57507 132.99588 c
S
0 i
1 1 1 sc
CM
47.898487 433 m
234.34773 433 l
234.34773 189 l
47.898487 189 l
h
47.898487 433 m
f
50 240.13162 m
137.44925 240.13162 l
137.44925 155.3125 l
50 155.3125 l
h
50 240.13162 m
f
[
12
12
] 0 d
0.60000002 i
0.64705902 0.64705902 0.64705902 sc
1 0 0 -1 -114 483 cm
169.86537 441.70117 m
316.03311 333.87695 l
S
0 i
CM
204.78606 147.46335 m
202.49246 147.8096 200.91382 149.94963 201.26006 152.24324 c
201.60631 154.53683 203.74635 156.11548 206.03995 155.76924 c
208.33356 155.42299 209.9122 153.28296 209.56595 150.98935 c
209.2197 148.69574 207.07967 147.1171 204.78606 147.46335 c
f
0 J
0 j
[] 0 d
1 0 0 -1 -114 483 cm
318.78607 335.53665 m
316.49246 335.1904 314.91382 333.05038 315.26007 330.75677 c
315.60632 328.46317 317.74634 326.88452 320.03995 327.23077 c
322.33356 327.57703 323.9122 329.71704 323.56595 332.01065 c
323.2197 334.30426 321.07965 335.8829 318.78607 335.53665 c
S
CM
53.112427 42.958527 m
55.406029 42.612274 56.984673 40.472244 56.638424 38.178638 c
56.292175 35.885036 54.152142 34.306389 51.85854 34.652641 c
49.56493 34.99889 47.986286 37.13892 48.332539 39.432526 c
48.678791 41.726128 50.818825 43.304775 53.112427 42.958527 c
f
1 0 0 -1 -114 483 cm
167.11243 440.04147 m
169.40604 440.38773 170.98468 442.52774 170.63843 444.82135 c
170.29218 447.11496 168.15215 448.6936 165.85854 448.34735 c
163.56493 448.0011 161.98628 445.86108 162.33253 443.56747 c
162.67879 441.27386 164.81882 439.69522 167.11243 440.04147 c
S
4 w
1 J
1 j
0.60000002 i
0 0 0 sc
164 449 m
529.17358 446.79803 l
S
3 w
163.89848 392.99609 m
538.8985 391 l
S
/Cs1 SC
0 sc
0 i
1 0 0 -1 421.05075 76 cm
/F1.1[ 20 0 0 -20 0 0]sf
-10.977783 4.5 m
(!)s
/F1.1[ 15 0 0 -15 0 0]sf
0.14526367 11.5 m
(")s
1 0 0 -1 185.05075 180.5 cm
/F1.1[ 20 0 0 -20 0 0]sf
-10.841064 4.5 m
(#)s
/F1.1[ 15 0 0 -15 0 0]sf
2.4987793 11.5 m
($)s
0.60000002 i
/Cs2 SC
1 0.80000001 0 sc
1 0 0 -1 -114 483 cm
349.98334 283.5 m
418.37558 283.5 l
418.37558 330.5 l
349.98334 330.5 l
h
349.98334 283.5 m
S
5 w
0.89803898 0.49019599 0.17254899 sc
161.89848 271.55554 m
374.26471 59.189342 l
S
0 i
CM
270.44705 433.99298 m
256.44632 427.62903 l
264.08307 419.99228 l
h
270.44705 433.99298 m
f
0 J
0 j
1 0 0 -1 -114 483 cm
384.44705 49.007004 m
370.44632 55.370964 l
378.08307 63.007717 l
h
384.44705 49.007004 m
S
3 w
1 J
1 j
[
12
12
] 0 d
0.60000002 i
0.64705902 0.64705902 0.64705902 sc
525.30707 442.06058 m
188.41992 258.46448 l
S
0 i
CM
74.760925 227.73193 m
75.416252 225.50684 74.1437 223.17178 71.91861 222.51646 c
69.693512 221.86113 67.358459 223.13368 66.703125 225.35878 c
66.047798 227.58388 67.320351 229.91893 69.545448 230.57426 c
71.770546 231.22958 74.105598 229.95703 74.760925 227.73193 c
f
0 J
0 j
[] 0 d
1 0 0 -1 -114 483 cm
188.76093 255.26807 m
189.41624 257.49316 188.14371 259.82822 185.91861 260.48355 c
183.69351 261.13885 181.35846 259.8663 180.70312 257.6412 c
180.04781 255.41612 181.32034 253.08107 183.54546 252.42574 c
185.77054 251.77042 188.10561 253.04297 188.76093 255.26807 c
S
CM
410.96609 37.743011 m
410.31076 39.968109 411.58331 42.303158 413.80841 42.958488 c
416.03351 43.613815 418.36856 42.341263 419.0239 40.116169 c
419.67923 37.891068 418.40668 35.556019 416.18158 34.900692 c
413.95648 34.245361 411.62143 35.517918 410.96609 37.743011 c
f
1 0 0 -1 -114 483 cm
524.96606 445.25699 m
524.31079 443.03189 525.58331 440.69684 527.80841 440.0415 c
530.03351 439.38617 532.36859 440.65875 533.02386 442.88382 c
533.6792 445.10892 532.40668 447.44397 530.18158 448.0993 c
527.95648 448.75464 525.6214 447.48209 524.96606 445.25699 c
S
1 J
1 j
[
12
12
] 0 d
0.60000002 i
526.31464 443.04678 m
323.00766 331.82974 l
S
0 i
CM
209.35373 154.36612 m
210.00552 152.13998 208.72926 149.80696 206.50313 149.15517 c
204.27699 148.50337 201.94397 149.77963 201.29218 152.00577 c
200.64038 154.2319 201.91664 156.56493 204.14278 157.21672 c
206.36891 157.86852 208.70193 156.59225 209.35373 154.36612 c
f
0 J
0 j
[] 0 d
1 0 0 -1 -114 483 cm
323.35373 328.63388 m
324.00552 330.86002 322.72925 333.19302 320.50314 333.84482 c
318.27701 334.49661 315.94397 333.22037 315.29218 330.99423 c
314.64038 328.7681 315.91663 326.43506 318.14276 325.78326 c
320.3689 325.13147 322.70193 326.40775 323.35373 328.63388 c
S
CM
411.96857 36.757359 m
411.31677 38.983494 412.59302 41.316517 414.81915 41.968315 c
417.04529 42.620106 419.37833 41.343845 420.03012 39.117714 c
420.68192 36.891575 419.40564 34.558552 417.1795 33.906757 c
414.95337 33.254963 412.62033 34.531227 411.96857 36.757359 c
f
1 0 0 -1 -114 483 cm
525.96857 446.24265 m
525.31677 444.01651 526.59302 441.68347 528.81915 441.03168 c
531.04529 440.37988 533.3783 441.65616 534.03009 443.88229 c
534.68188 446.10843 533.40564 448.44144 531.1795 449.09323 c
528.95337 449.74503 526.62036 448.46878 525.96857 446.24265 c
S
1 J
1 j
[
12
12
] 0 d
0.60000002 i
527.32355 441.54648 m
239.9035 207.47856 l
S
0 i
CM
126.825 278.60107 m
127.06108 276.29352 125.38182 274.23151 123.07427 273.99542 c
120.76673 273.75934 118.7047 275.4386 118.46862 277.74615 c
118.23254 280.05371 119.9118 282.11572 122.21935 282.35181 c
124.5269 282.58789 126.58893 280.90863 126.825 278.60107 c
f
0 J
0 j
[] 0 d
1 0 0 -1 -114 483 cm
240.825 204.39893 m
241.06108 206.70648 239.38182 208.76849 237.07428 209.00458 c
234.76672 209.24066 232.7047 207.56139 232.46863 205.25385 c
232.23254 202.94629 233.9118 200.88428 236.21936 200.64819 c
238.5269 200.41212 240.58893 202.09138 240.825 204.39893 c
S
CM
412.40201 38.373878 m
412.16595 40.681427 413.84521 42.743446 416.15274 42.97953 c
418.4603 43.215611 420.52231 41.536346 420.75839 39.228802 c
420.99448 36.921249 419.31522 34.85923 417.00766 34.62315 c
414.70013 34.38707 412.63809 36.066334 412.40201 38.373878 c
f
1 0 0 -1 -114 483 cm
526.40204 444.62613 m
526.16595 442.31857 527.84521 440.25656 530.15277 440.02048 c
532.46027 439.78439 534.52234 441.46365 534.75842 443.77121 c
534.99451 446.07877 533.31525 448.14078 531.00769 448.37686 c
528.70013 448.61292 526.63812 446.93365 526.40204 444.62613 c
S
1 J
1 j
[
12
12
] 0 d
0.60000002 i
528.32794 442.54108 m
385.96738 326.43848 l
S
0 i
CM
272.89105 159.6405 m
273.12549 157.33278 271.44476 155.27196 269.13705 155.03751 c
266.82935 154.80305 264.76852 156.48378 264.53406 158.79149 c
264.29962 161.09921 265.98035 163.16003 268.28806 163.39449 c
270.59576 163.62894 272.65662 161.94821 272.89105 159.6405 c
f
0 J
0 j
[] 0 d
1 0 0 -1 -114 483 cm
386.89105 323.3595 m
387.12549 325.66721 385.44476 327.72806 383.13705 327.96249 c
380.82935 328.19693 378.76852 326.51624 378.53406 324.20853 c
378.29962 321.90079 379.98035 319.83997 382.28806 319.60553 c
384.59576 319.37106 386.65662 321.05179 386.89105 323.3595 c
S
CM
413.40427 37.379959 m
413.16983 39.687675 414.85052 41.748505 417.15826 41.982956 c
419.46597 42.217403 421.52679 40.536682 421.76126 38.22897 c
421.9957 35.921253 420.31497 33.86042 418.00726 33.625973 c
415.69955 33.391525 413.6387 35.07225 413.40427 37.379959 c
f
1 0 0 -1 -114 483 cm
527.40424 445.62003 m
527.1698 443.31232 528.85052 441.2515 531.15826 441.01703 c
533.46594 440.78259 535.52679 442.46332 535.76123 444.77103 c
535.99567 447.07874 534.315 449.13959 532.00726 449.37402 c
529.69952 449.60846 527.63873 447.92776 527.40424 445.62003 c
S
1 J
1 j
[
12
12
] 0 d
0.60000002 i
533.10675 440.69571 m
375.1203 71.329353 l
S
0 i
CM
263.3671 413.9696 m
262.50406 411.81653 260.05902 410.77075 257.90598 411.63376 c
255.7529 412.49677 254.70709 414.9418 255.57011 417.09488 c
256.43314 419.24796 258.87817 420.29373 261.03125 419.43073 c
263.1843 418.56769 264.2301 416.12268 263.3671 413.9696 c
f
0 J
0 j
[] 0 d
1 0 0 -1 -114 483 cm
377.3671 69.030396 m
376.50406 71.183464 374.05902 72.229263 371.90598 71.366241 c
369.7529 70.503227 368.70709 68.058189 369.57013 65.905128 c
370.43314 63.752052 372.87817 62.706261 375.03125 63.569279 c
377.1843 64.432297 378.2301 66.877335 377.3671 69.030396 c
S
CM
416.85992 40.005341 m
417.72296 42.158413 420.16797 43.204205 422.32104 42.341187 c
424.47412 41.478168 425.51993 39.033134 424.65689 36.88007 c
423.79388 34.726997 421.34885 33.681202 419.19577 34.544224 c
417.04272 35.407242 415.99692 37.852276 416.85992 40.005341 c
f
1 0 0 -1 -114 483 cm
530.85992 442.99466 m
531.72296 440.84158 534.16797 439.79581 536.32104 440.65881 c
538.47412 441.52182 539.5199 443.96686 538.65692 446.11993 c
537.79388 448.27301 535.34888 449.31879 533.1958 448.45578 c
531.04272 447.59274 529.99689 445.14774 530.85992 442.99466 c
S
1 J
1 j
[
12
12
] 0 d
0.60000002 i
534.09357 441.70132 m
398.30521 125.49841 l
S
0 i
CM
286.54868 359.8038 m
285.68875 357.64948 283.24524 356.60016 281.09094 357.46005 c
278.93661 358.31998 277.8873 360.76349 278.74719 362.91779 c
279.60712 365.07211 282.0506 366.12143 284.20493 365.26154 c
286.35925 364.40164 287.40857 361.9581 286.54868 359.8038 c
f
0 J
0 j
[] 0 d
1 0 0 -1 -114 483 cm
400.54868 123.1962 m
399.68875 125.35052 397.24524 126.39984 395.09094 125.53994 c
392.93661 124.68003 391.8873 122.23652 392.74719 120.08221 c
393.60712 117.92789 396.0506 116.87856 398.20493 117.73846 c
400.35925 118.59837 401.40857 121.04189 400.54868 123.1962 c
S
CM
417.8501 38.996456 m
418.71002 41.150772 421.15353 42.2001 423.30783 41.340195 c
425.46216 40.480293 426.51147 38.036774 425.65158 35.882462 c
424.79169 33.728142 422.34818 32.678814 420.19385 33.538723 c
418.03952 34.398628 416.9902 36.842144 417.8501 38.996456 c
f
1 0 0 -1 -114 483 cm
531.8501 444.00354 m
532.71002 441.84921 535.1535 440.7999 537.30786 441.65979 c
539.46216 442.51971 540.51147 444.96323 539.65155 447.11755 c
538.79169 449.27185 536.34814 450.3212 534.19385 449.46127 c
532.03955 448.60138 530.99017 446.15787 531.8501 444.00354 c
S
1 J
1 j
[
12
12
] 0 d
0.60000002 i
529.33423 443.53342 m
433.84464 365.49768 l
S
0 i
CM
320.77139 120.58038 m
321.00354 118.27242 319.32074 116.21327 317.01282 115.98113 c
314.70486 115.74899 312.64569 117.43176 312.41357 119.73971 c
312.18143 122.04766 313.8642 124.10681 316.17215 124.33896 c
318.48007 124.5711 320.53925 122.88832 320.77139 120.58038 c
f
0 J
0 j
[] 0 d
1 0 0 -1 -114 483 cm
434.77139 362.41962 m
435.00354 364.72757 433.32074 366.78671 431.01282 367.01886 c
428.70486 367.25101 426.64569 365.56824 426.41357 363.26028 c
426.18143 360.95233 427.8642 358.89319 430.17215 358.66104 c
432.48007 358.42889 434.53925 360.11169 434.77139 362.41962 c
S
CM
414.40744 36.388542 m
414.17529 38.696491 415.85809 40.755642 418.16602 40.987789 c
420.47397 41.219929 422.53314 39.537151 422.76526 37.229206 c
422.99741 34.921257 421.31464 32.862103 419.00668 32.629963 c
416.69873 32.39782 414.63959 34.080601 414.40744 36.388542 c
f
1 0 0 -1 -114 483 cm
528.40747 446.61145 m
528.17529 444.3035 529.85809 442.24435 532.16602 442.01221 c
534.474 441.78006 536.53314 443.46286 536.76526 445.77078 c
536.99744 448.07874 535.31464 450.13791 533.00671 450.37003 c
530.69873 450.60217 528.63959 448.9194 528.40747 446.61145 c
S
5 w
1 J
1 j
0.60000002 i
0.89803898 0.49019599 0.17254899 sc
324 328 m
324 328 372.86609 294.06503 393.42709 235.55421 c
406.12912 199.40778 404.33878 164.38263 401.11441 142.88843 c
S
0 i
CM
284.1304 354.19235 m
281.8331 338.98572 l
292.39844 341.22473 l
h
284.1304 354.19235 m
f
0 J
0 j
1 0 0 -1 -114 483 cm
398.1304 128.80763 m
395.8331 144.0143 l
406.39844 141.77527 l
h
398.1304 128.80763 m
S
4 w
1 J
1 j
0.60000002 i
0.69411802 0 0.109804 sc
433 392.22565 m
451.44458 392.11227 l
S
0 i
CM
350.24432 90.966408 m
337.41507 95.687637 l
337.47406 86.087822 l
h
350.24432 90.966408 m
f
0 J
0 j
1 0 0 -1 -114 483 cm
464.24432 392.0336 m
451.41507 387.31235 l
451.47406 396.91217 l
h
464.24432 392.0336 m
S
3 w
1 J
1 j
[
12
12
] 0 d
0.60000002 i
0.64705902 0.64705902 0.64705902 sc
534.58795 442.2467 m
514.22791 395.34296 l
S
0 i
CM
402.46234 89.96801 m
401.61087 87.810349 399.17148 86.751457 397.01382 87.602913 c
394.85614 88.454369 393.79727 90.893761 394.64871 93.051422 c
395.50018 95.209099 397.93954 96.26799 400.09723 95.416527 c
402.25488 94.565063 403.31378 92.125679 402.46234 89.96801 c
f
0 J
0 j
[] 0 d
1 0 0 -1 -114 483 cm
516.46234 393.03198 m
515.61084 395.18967 513.17151 396.24854 511.01382 395.39709 c
508.85614 394.54562 507.79727 392.10623 508.64871 389.94858 c
509.50018 387.79089 511.93954 386.73203 514.09723 387.58347 c
516.25488 388.43494 517.31378 390.87433 516.46234 393.03198 c
S
CM
418.35355 38.442314 m
419.20499 40.599983 421.64438 41.658875 423.80206 40.807415 c
425.95972 39.955956 427.01862 37.516567 426.16714 35.358902 c
425.31567 33.201233 422.87631 32.142342 420.71863 32.993801 c
418.56097 33.845261 417.50208 36.284653 418.35355 38.442314 c
f
1 0 0 -1 -114 483 cm
532.35352 444.55768 m
533.20502 442.40002 535.64441 441.34113 537.80206 442.1926 c
539.95972 443.04404 541.01862 445.48343 540.16718 447.64108 c
539.31567 449.79877 536.87628 450.85767 534.71863 450.0062 c
532.56097 449.15472 531.50208 446.71536 532.35352 444.55768 c
S
1 J
1 j
[
12
12
] 0 d
0.60000002 i
527.46606 441.54489 m
436.24173 393.58646 l
S
0 i
CM
322.53482 92.614677 m
323.22339 90.399635 321.98593 88.045807 319.7709 87.357239 c
317.55585 86.668686 315.20203 87.906143 314.51346 90.121178 c
313.82489 92.33622 315.06235 94.690056 317.2774 95.378616 c
319.49243 96.067177 321.84628 94.829712 322.53482 92.614677 c
f
0 J
0 j
[] 0 d
1 0 0 -1 -114 483 cm
436.53482 390.38531 m
437.22339 392.60037 435.98593 394.95419 433.7709 395.64276 c
431.55585 396.33133 429.20203 395.09384 428.51346 392.87881 c
427.82489 390.66379 429.06235 388.30994 431.2774 387.62137 c
433.49243 386.93283 435.84628 388.17029 436.53482 390.38531 c
S
CM
413.17291 38.253956 m
412.48438 40.468998 413.72183 42.82283 415.93686 43.511395 c
418.15189 44.199951 420.50574 42.96249 421.19431 40.747456 c
421.88284 38.532413 420.64539 36.178577 418.43036 35.490017 c
416.21533 34.80146 413.86148 36.038921 413.17291 38.253956 c
f
1 0 0 -1 -114 483 cm
527.17291 444.74603 m
526.48438 442.53101 527.7218 440.17719 529.93683 439.48862 c
532.15192 438.80005 534.50574 440.03751 535.19427 442.25253 c
535.88287 444.46759 534.64539 446.82141 532.43036 447.50998 c
530.21533 448.19855 527.86145 446.96109 527.17291 444.74603 c
S
1 J
1 j
[
12
12
] 0 d
0.60000002 i
529.86914 444.05737 m
471.33142 396.14258 l
S
0 i
CM
358.26062 89.934731 m
358.49094 87.626602 356.80655 85.568771 354.49841 85.33844 c
352.19028 85.108116 350.13245 86.792511 349.90213 89.100639 c
349.67178 91.408768 351.3562 93.466599 353.66431 93.69693 c
355.97244 93.927254 358.03027 92.242859 358.26062 89.934731 c
f
0 J
0 j
[] 0 d
1 0 0 -1 -114 483 cm
472.26062 393.06528 m
472.49094 395.37341 470.80655 397.43121 468.49841 397.66156 c
466.19028 397.89188 464.13245 396.20749 463.90213 393.89935 c
463.67178 391.59122 465.3562 389.53339 467.66431 389.30307 c
469.97244 389.07275 472.03027 390.75714 472.26062 393.06528 c
S
CM
414.93994 35.865295 m
414.70963 38.173424 416.39401 40.231255 418.70215 40.461586 c
421.01028 40.691914 423.06812 39.007515 423.29843 36.69939 c
423.52878 34.391258 421.84436 32.333427 419.53625 32.1031 c
417.22812 31.872772 415.17029 33.557171 414.93994 35.865295 c
f
1 0 0 -1 -114 483 cm
528.93994 447.1347 m
528.70966 444.82657 530.39404 442.76874 532.70215 442.53842 c
535.01025 442.30807 537.06812 443.99249 537.29846 446.3006 c
537.52875 448.60873 535.84436 450.66656 533.53625 450.89691 c
531.22809 451.12723 529.17029 449.44284 528.93994 447.1347 c
S
0.68627453 0.32156864 0.87058824 sc
1 0 0 -1 37.050755 257.13162 cm
/F1.1[ 20 0 0 -20 0 0]sf
-11.401367 7 m
(%&)[ 11.679688 0.000000 ] xS
0 0.47843137 1 sc
1 0 0 -1 121.05076 234.5 cm
-5.5615234 7 m
(&)s
0.15686275 0.80392158 0.25490198 sc
1 0 0 -1 269.70303 183 cm
-22.519531 7 m
(&'%'&)[ 11.123047 5.556641 11.679688 5.556641 0.000000 ] xS
5 w
1 J
1 j
0.60000002 i
0.69411767 0 0.10980392 sc
1 0 0 -1 -114 483 cm
180.20592 253.60129 m
218.33997 215.21584 l
S
0 i
CM
114.48879 277.99991 m
100.50906 271.58997 l
108.17087 263.97836 l
h
114.48879 277.99991 m
f
0 J
0 j
1 0 0 -1 -114 483 cm
228.4888 205.00009 m
214.50906 211.41002 l
222.17087 219.02165 l
h
228.4888 205.00009 m
S
/Cs1 SC
0 sc
1 0 0 -1 84.949242 76 cm
-30.014648 7 m
(\(\)*++,)[ 10.000000 10.000000 6.660156 11.123047 11.123047 0.000000 ] xS
1 0 0 -1 55.050755 17 cm
-5.5615234 7 m
($)s
1 0 0 -1 416.05075 17 cm
-7.2216797 7 m
(")s
1 0 0 -1 315.05075 76 cm
-9.732666 4.5 m
(!)s
/F1.1[ 15 0 0 -15 0 0]sf
1.3903809 11.5 m
($)s
1 0 0 -1 277.65851 395.5 cm
/F1.1[ 20 0 0 -20 0 0]sf
-12.086182 4.5 m
(#)s
/F1.1[ 15 0 0 -15 0 0]sf
1.2536621 11.5 m
(")s
1 0 0 -1 281.05075 165.5 cm
/F1.1[ 20 0 0 -20 0 0]sf
-6.6699219 7 m
(-)s
1 0 0 -1 300.05075 123.55556 cm
-6.6699219 7 m
(.)s
/Cs2 SC
0.69411999 0 0.1098 sc
1 0 0 -1 281.05075 106.5 cm
-48.364258 4.5 m
(\(/0!'1/'!)[ 10.000000 5.556641 11.123047 11.123047 5.556641 11.123047 5.556641 5.556641 0.000000 ] xS
/F1.1[ 15 0 0 -15 0 0]sf
28.354492 11.5 m
(.-)[ 10.004883 0.000000 ] xS
/Cs1 SC
0 sc
1 0 0 -1 363.05075 76 cm
/F1.1[ 20 0 0 -20 0 0]sf
-15.566406 4.5 m
(!)s
/F1.1[ 15 0 0 -15 0 0]sf
-4.4433594 11.5 m
(.-)[ 10.004883 0.000000 ] xS
ep
end
%%Trailer
%%EOF
