%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 458.000000 504.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.14.1 (Build 18B75) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 458 504
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 458 504
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: Helvetica
%!FontType1-1.0: Helvetica 1.0000.0.0000
14 dict begin/FontName /Helvetica def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /p put
dup 34 /R put
dup 35 /plus put
dup 36 /two put
dup 37 /hyphen put
dup 38 /zero put
dup 39 /four put
dup 40 /s put
dup 41 /c put
dup 42 /r put
dup 43 /e put
dup 44 /n put
dup 45 /L put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[2048 -1947 1 index div -985 2 index div 2961 3 index div 2297 5 -1 roll div]cvx def
/sfnts [<








00>] def
/CharStrings 15 dict dup begin
/.notdef 0 def
/plus 1 def
/hyphen 2 def
/zero 3 def
/two 4 def
/four 5 def
/L 6 def
/R 7 def
/c 8 def
/e 9 def
/n 10 def
/p 11 def
/r 12 def
/s 13 def
/u20B8 14 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.00048828125 0 0 0.00048828125 0 0 ] def
/FontBBox{-1947 -985 2961 2297}def
/UniqueID 4072461 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C5586B741EEB93F3C73016EC16BFF283758900903D203992EFC8BAFAF13579C602F38C91B1454491BCF48412CA40CE1C5F7851A403FDB5F7EBECD00BD5944235E0907062FB53990855BEBF20E9C6554509E62A79EAF0EC4F69086B036B146FB91759A4F509B7A266881E6ECD39C72ECBD2F69B4DBF1F51A619BEB49E75FFB67B50067EFD9D748AFEAB2981D25965E66DA8A0AB034E7BE08A36933C97AE838C594E2EFAC17418CC6870BB417F7CB3E3FD1E54A3F7947952BE8C08D920EEF3B1BB7B0365E8BF169B5E0804A321204981DC621E965E4A006A74809F64018B6C71E78F05A4B949B86BF5B3D69DA8870A25B4DC40FDBEDA778F7B505E236FE87F704FDFD37DB790957204F3AE210DEB50C0DC7FCEBB2FEC112DB140EF29B7A7842FF25642CE833F2A3E3E4E47884FECF2F4767EB42AC6D06FD2F305BFEE3DB1C9406E58651573D45C5FB02FF7387F70DF846EE6504C3BDE68A662FF2F897753FB0604D78A506F5C323418ED7742F515A7D810E8C73920294B8DB4C90F104A29B9F2D64127FCA4F090F3DADB7251C2B42A01E5630A4E0F9497A74E7EB16E04371763530DC0F0D41FC8AE02544FE2C26EC22B87A3D930383B279ED606C741B6E39BFBD8392417AC430A0DC97DB270C114407CD017D1DD4DA9F72457AF45763B37768587B4661A326D1380BE79D1B4346CA9F35BEB3D47FF179C54BF4514294D5AF906BD4781F1B9989857F5E082E4D5D3FEC1DE95F0486D8E5CD5F7D053F485AA0CB4DB0919898AAC098C2063B90B1A1AE598812554AFC3D0DA23FBD77EE857E3B306F6EDF5E007

806F9FB3BF12C7F0AB0DE421A3AB26FF9A9E6CA6A0120C57E1705513830FEDCC67634DAA2AE21BA2B7165791D0D4B437E28662F824AED7DE9889C34C515BEC81460FE3EE9C8C3BBE96076BFCAD6B75992D23703338C1F6006D83D6523488BFCBE841C2020C6102BD79B76A9BA39132E7010F577E117DB119E9C2856B3AFE1FA5AED7F59A5D6A9B01823A8AC6358CF3CC8FA0E0EDB137C97EC9006B85773E5F92EF5EE7346F1E40943076EBD352669266D701F5508ABC5DD64DB75C8B8753478494964240856732A3C9D3B024041B6C86E35E54F75682519B6E0A285F3CEE89AE4DD61EF5362605B005CCD572E699F07588BC3C0F6ACEA959736A313106EA26BCAAC4E3C77AC8E6C488B39B7D1428990AC9CF8FB78A6D25197E3C7DFD85E87D8A4B01008DA788DDC7AE0C64EBF6E7B9DF6136684877E5EF272947D964F32BBA4253FFBD633D6F06AA8398DEBE824A14BF91149E07A9B2F95550EC4B37B4F1A68D9B66466339B6D863A1384CAE1B01D0B66D0CDC3F5A84CA53EDB58679F12C43CE2BD3C601A6BC2E93339CA932BFF67CCEEFB660CC6D5B825B44523D283697172D7B37E66D81F6C8C3CCF380EF454F09D6647A83B13D8CE8A6CFB0ED9089E031B2F156E5B449EA6D6CCBCDB6A7
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/Helvetica cguidfix
/F1.1/Helvetica renmfont
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
 exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
1 sc
q
0 0 458 504 rc
0 504 m
458 504 l
458 0 l
0 0 l
h
f
/Cs2 SC
1 1 1 sc
-902.1507 1153.3151 m
1777.3014 1153.3151 l
1777.3014 -794.63013 l
-902.1507 -794.63013 l
h
-902.1507 1153.3151 m
f
3 w
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -115 483 cm
372.51801 313.29523 m
372.51801 313.29523 336.66751 321.25748 314.19489 303.28647 c
291.72223 285.31546 286.76196 282.95804 293.19489 249.8618 c
299.62781 216.76558 339.65472 214.32158 336.90158 186.46455 c
334.14844 158.60751 286.96973 175.20647 283.47693 151.53304 c
279.98413 127.8596 301.42172 124.13914 324.57281 102.9029 c
347.72391 81.666672 336.35236 76.611534 365.19489 76.574135 c
394.03738 76.536736 414.09116 76.43515 426.3801 102.77088 c
438.66901 129.10661 399.57568 143.10561 408.57187 169.53307 c
417.56805 195.96053 436.33136 172.82259 458.13446 196.05359 c
479.93756 219.28459 491.9787 225.26436 485.53171 251.53304 c
479.08475 277.80173 467.39551 271.27832 435.37817 288.77585 c
403.36081 306.27338 372.51801 313.29523 372.51801 313.29523 c
S
4 w
164 449 m
529.17358 446.79803 l
S
3 w
163.89848 392.99609 m
538.8985 391 l
S
/Cs1 SC
0 sc
0 i
1 0 0 -1 420.05075 76 cm
/F1.1[ 20 0 0 -20 0 0]sf
-10.977783 4.5 m
(!)s
/F1.1[ 15 0 0 -15 0 0]sf
0.14526367 11.5 m
(")s
[
12
12
] 0 d
0.60000002 i
/Cs2 SC
0.64705902 0.64705902 0.64705902 sc
1 0 0 -1 -115 483 cm
518.63928 439.67319 m
271.7355 137.63927 l
S
0 i
CM
158.25627 348.19278 m
158.02448 345.8848 155.96559 344.20172 153.65761 344.4335 c
151.34962 344.66531 149.66653 346.72421 149.89833 349.0322 c
150.13011 351.34018 152.18901 353.02325 154.49699 352.79147 c
156.80498 352.55966 158.48807 350.50076 158.25627 348.19278 c
f
0 J
0 j
[] 0 d
1 0 0 -1 -115 483 cm
273.25629 134.80721 m
273.02448 137.11519 270.96558 138.79828 268.65759 138.5665 c
266.34961 138.3347 264.66653 136.2758 264.89832 133.96782 c
265.13013 131.65984 267.18903 129.97675 269.49701 130.20854 c
271.80496 130.44032 273.48807 132.49924 273.25629 134.80721 c
S
CM
402.11856 40.494762 m
402.35034 42.802746 404.40924 44.485832 406.71722 44.254044 c
409.02521 44.022251 410.70828 41.963348 410.4765 39.655369 c
410.24472 37.347382 408.18582 35.664295 405.87784 35.896088 c
403.56985 36.12788 401.88675 38.186783 402.11856 40.494762 c
f
1 0 0 -1 -115 483 cm
517.11853 442.50525 m
517.35034 440.19727 519.40924 438.51416 521.71722 438.74597 c
524.02521 438.97775 525.70831 441.03665 525.4765 443.34464 c
525.24469 445.65262 523.18579 447.33569 520.87781 447.10391 c
518.56982 446.87213 516.88678 444.81323 517.11853 442.50525 c
S
1 J
1 j
[
12
12
] 0 d
0.60000002 i
519.18372 440.20956 m
289.73828 159.20151 l
S
0 i
CM
176.26068 326.62967 m
176.02756 324.32184 173.9677 322.63992 171.65984 322.87305 c
169.35199 323.10617 167.67009 325.16605 167.90321 327.47391 c
168.13634 329.78174 170.19621 331.46365 172.50406 331.23053 c
174.8119 330.99741 176.4938 328.93753 176.26068 326.62967 c
f
0 J
0 j
[] 0 d
1 0 0 -1 -115 483 cm
291.26068 156.37032 m
291.02756 158.67818 288.96768 160.36008 286.65985 160.12695 c
284.35199 159.89383 282.6701 157.83395 282.90323 155.52611 c
283.13635 153.21826 285.1962 151.53636 287.50406 151.76949 c
289.81189 152.00261 291.4938 154.06247 291.26068 156.37032 c
S
CM
402.66135 39.959255 m
402.89447 42.267101 404.95432 43.949001 407.26218 43.715881 c
409.57004 43.482758 411.25192 41.422882 411.0188 39.115036 c
410.78568 36.807186 408.7258 35.125286 406.41797 35.35841 c
404.11011 35.591534 402.42822 37.651409 402.66135 39.959255 c
f
1 0 0 -1 -115 483 cm
517.66132 443.04074 m
517.89447 440.73291 519.95435 439.05099 522.26221 439.28412 c
524.57001 439.51724 526.25195 441.57712 526.0188 443.88495 c
525.78571 446.19281 523.72583 447.87473 521.41797 447.6416 c
519.11011 447.40848 517.42822 445.3486 517.66132 443.04074 c
S
1 J
1 j
[
12
12
] 0 d
0.60000002 i
523.28064 438.89459 m
430.14267 110.92027 l
S
0 i
CM
317.66348 374.0744 m
316.53375 372.04852 313.97562 371.32205 311.94974 372.45181 c
309.92386 373.58154 309.19739 376.13968 310.32712 378.16556 c
311.45688 380.19144 314.01501 380.91791 316.04089 379.78818 c
318.06677 378.65842 318.79324 376.10028 317.66348 374.0744 c
f
0 J
0 j
[] 0 d
1 0 0 -1 -115 483 cm
432.66348 108.92561 m
431.53375 110.95148 428.97562 111.67795 426.94974 110.5482 c
424.92386 109.41846 424.19739 106.86031 425.32712 104.83443 c
426.45688 102.80855 429.01501 102.08209 431.04089 103.21184 c
433.06677 104.34158 433.79324 106.89973 432.66348 108.92561 c
S
CM
405.7598 42.110752 m
406.88956 44.136627 409.44769 44.863087 411.47357 43.733345 c
413.49945 42.6036 414.22592 40.045452 413.09616 38.019573 c
411.96643 35.99369 409.40826 35.267231 407.38239 36.39698 c
405.35651 37.526726 404.63007 40.084873 405.7598 42.110752 c
f
1 0 0 -1 -115 483 cm
520.75983 440.88925 m
521.88953 438.86337 524.44769 438.1369 526.47357 439.26666 c
528.49945 440.39639 529.22589 442.95456 528.09619 444.98044 c
526.96643 447.00632 524.40826 447.73276 522.38239 446.60303 c
520.35651 445.47327 519.63007 442.91513 520.75983 440.88925 c
S
1 J
1 j
[
12
12
] 0 d
0.60000002 i
523.81085 439.43738 m
410.39661 41.621067 l
S
0 i
CM
297.91541 443.37619 m
296.78772 441.34915 294.23035 440.62006 292.20331 441.74771 c
290.17627 442.87537 289.44717 445.43277 290.57483 447.45981 c
291.70248 449.48685 294.25989 450.21594 296.28693 449.08829 c
298.31396 447.96063 299.04306 445.40323 297.91541 443.37619 c
f
0 J
0 j
[] 0 d
1 0 0 -1 -115 483 cm
412.91541 39.623817 m
411.78772 41.650856 409.23035 42.379948 407.20331 41.252289 c
405.17627 40.12463 404.44717 37.56723 405.57483 35.540192 c
406.70248 33.513149 409.25989 32.784058 411.28693 33.91172 c
413.31396 35.039379 414.04306 37.596779 412.91541 39.623817 c
S
CM
406.29205 41.565369 m
407.41971 43.592407 409.97711 44.321499 412.00415 43.193844 c
414.03119 42.066185 414.76028 39.508781 413.63263 37.481743 c
412.50497 35.4547 409.94757 34.725609 407.92053 35.853271 c
405.89349 36.98093 405.1644 39.53833 406.29205 41.565369 c
f
1 0 0 -1 -115 483 cm
521.29205 441.43463 m
522.41974 439.40759 524.97711 438.6785 527.00415 439.80615 c
529.03119 440.93381 529.76031 443.49121 528.63263 445.51825 c
527.50494 447.54529 524.94757 448.27438 522.92053 447.14673 c
520.89349 446.01907 520.16437 443.46167 521.29205 441.43463 c
S
1 J
1 j
[
12
12
] 0 d
0.60000002 i
525.27704 439.76083 m
489.48706 244.86343 l
S
0 i
CM
377.18588 239.88287 m
375.8689 237.9734 373.25333 237.4931 371.34387 238.81009 c
369.43439 240.12706 368.9541 242.74263 370.27109 244.6521 c
371.58804 246.56157 374.20361 247.04187 376.1131 245.72488 c
378.02255 244.40791 378.50287 241.79234 377.18588 239.88287 c
f
0 J
0 j
[] 0 d
1 0 0 -1 -115 483 cm
492.18588 243.11713 m
490.8689 245.0266 488.25333 245.5069 486.34387 244.18991 c
484.43439 242.87294 483.9541 240.25737 485.27109 238.3479 c
486.58804 236.43843 489.20361 235.95813 491.1131 237.27512 c
493.02255 238.59209 493.50287 241.20766 492.18588 243.11713 c
S
CM
407.57819 41.492836 m
408.89517 43.402302 411.51074 43.88261 413.4202 42.565632 c
415.32968 41.248653 415.80997 38.633087 414.49301 36.723621 c
413.17603 34.814148 410.56046 34.333839 408.651 35.650822 c
406.74152 36.967804 406.2612 39.583366 407.57819 41.492836 c
f
1 0 0 -1 -115 483 cm
522.57819 441.50717 m
523.8952 439.59769 526.51074 439.1174 528.42023 440.43436 c
530.32965 441.75134 530.81 444.36691 529.49298 446.27637 c
528.17603 448.18585 525.56049 448.66617 523.651 447.34918 c
521.74152 446.0322 521.26123 443.41663 522.57819 441.50717 c
S
5 w
1 J
1 j
0.60000002 i
0.89803898 0.49019599 0.17254899 sc
164 199.80821 m
450.49359 2.6367271 l
S
0 i
CM
347.3558 488.5271 m
332.43216 484.81158 l
338.55505 475.91495 l
h
347.3558 488.5271 m
f
0 J
0 j
1 0 0 -1 -115 483 cm
462.3558 -5.5271106 m
447.43216 -1.8115972 l
453.55505 7.0850515 l
h
462.3558 -5.5271106 m
S
3 w
1 J
1 j
[
12
12
] 0 d
0.60000002 i
0.64705902 0.64705902 0.64705902 sc
516.74084 441.73849 m
172.16426 205.40775 l
S
0 i
CM
57.829567 280.73718 m
58.254482 278.45685 56.750362 276.26379 54.47002 275.83887 c
52.189682 275.41397 49.996628 276.91809 49.571709 279.19843 c
49.146793 281.47876 50.650913 283.67181 52.931255 284.09674 c
55.211597 284.52167 57.404652 283.01752 57.829567 280.73718 c
f
0 J
0 j
[] 0 d
1 0 0 -1 -115 483 cm
172.82956 202.26282 m
173.25449 204.54315 171.75037 206.73621 169.47002 207.16112 c
167.18968 207.58603 164.99663 206.08191 164.57172 203.80157 c
164.14679 201.52122 165.65091 199.32819 167.93126 198.90326 c
170.21159 198.47835 172.40465 199.98247 172.82956 202.26282 c
S
CM
401.07553 38.116562 m
400.6506 40.396904 402.15472 42.589951 404.43509 43.01487 c
406.71542 43.439789 408.90848 41.935661 409.33337 39.655323 c
409.7583 37.374981 408.25418 35.181931 405.97385 34.757015 c
403.69351 34.3321 401.50046 35.836224 401.07553 38.116562 c
f
1 0 0 -1 -115 483 cm
516.07556 444.88345 m
515.65063 442.60309 517.15472 440.41003 519.43506 439.98514 c
521.71539 439.56021 523.90845 441.06433 524.33337 443.34467 c
524.7583 445.62503 523.25421 447.81805 520.97382 448.24298 c
518.69348 448.66791 516.50043 447.16379 516.07556 444.88345 c
S
1 J
1 j
[
12
12
] 0 d
0.60000002 i
517.28369 442.27435 m
307.30847 298.10367 l
S
0 i
CM
192.97537 188.04094 m
193.39912 185.76038 191.89389 183.5681 189.61333 183.14435 c
187.33278 182.72058 185.14049 184.22583 184.71674 186.50638 c
184.29298 188.78694 185.79822 190.97923 188.07878 191.40298 c
190.35933 191.82674 192.55162 190.32149 192.97537 188.04094 c
f
0 J
0 j
[] 0 d
1 0 0 -1 -115 483 cm
307.97537 294.95908 m
308.39914 297.23962 306.89389 299.43192 304.61334 299.85565 c
302.33276 300.27942 300.1405 298.77417 299.71674 296.49362 c
299.29297 294.21304 300.79822 292.02078 303.07877 291.59702 c
305.35934 291.17328 307.55161 292.6785 307.97537 294.95908 c
S
CM
401.61679 37.581062 m
401.19302 39.861618 402.69827 42.053898 404.97882 42.477657 c
407.25937 42.901413 409.45166 41.396172 409.87543 39.115616 c
410.29916 36.835052 408.79395 34.642773 406.51337 34.219017 c
404.23282 33.795265 402.04053 35.300507 401.61679 37.581062 c
f
1 0 0 -1 -115 483 cm
516.61676 445.41895 m
516.19305 443.13837 517.69824 440.94611 519.97882 440.52234 c
522.2594 440.0986 524.45166 441.60382 524.87543 443.8844 c
525.29919 446.16495 523.79395 448.35724 521.51337 448.78098 c
519.23285 449.20474 517.04053 447.69949 516.61676 445.41895 c
S
1 J
1 j
[
12
12
] 0 d
0.60000002 i
520.25488 440.34494 m
339.1824 185.23892 l
S
0 i
CM
225.89218 300.48318 m
225.50403 298.19632 223.33546 296.65707 221.04858 297.04526 c
218.7617 297.43341 217.22247 299.60196 217.61063 301.88885 c
217.99879 304.17572 220.16734 305.71497 222.45422 305.32681 c
224.74112 304.93863 226.28033 302.77008 225.89218 300.48318 c
f
0 J
0 j
[] 0 d
1 0 0 -1 -115 483 cm
340.89218 182.5168 m
340.50403 184.80368 338.33548 186.34291 336.04858 185.95476 c
333.76169 185.5666 332.22247 183.39804 332.61063 181.11116 c
332.99878 178.82426 335.16733 177.28505 337.45422 177.6732 c
339.74112 178.06136 341.28033 180.22992 340.89218 182.5168 c
S
CM
403.5451 39.93293 m
403.93326 42.219814 406.10181 43.759041 408.3887 43.370884 c
410.6756 42.982727 412.21481 40.814167 411.82666 38.527283 c
411.43851 36.240395 409.26996 34.701172 406.98306 35.089329 c
404.69617 35.477489 403.15695 37.646049 403.5451 39.93293 c
f
1 0 0 -1 -115 483 cm
518.5451 443.06708 m
518.93329 440.78018 521.10181 439.24097 523.38873 439.62912 c
525.6756 440.01727 527.21484 442.18582 526.82666 444.47272 c
526.43848 446.75961 524.26996 448.29883 521.98303 447.91068 c
519.69617 447.52252 518.15692 445.35394 518.5451 443.06708 c
S
1 J
1 j
[
12
12
] 0 d
0.60000002 i
523.2218 440.37451 m
367.76498 71.341072 l
S
0 i
CM
255.02434 413.94553 m
254.14952 411.79724 251.69881 410.76486 249.55049 411.63965 c
247.40219 412.51447 246.36981 414.96518 247.24461 417.11349 c
248.11943 419.26181 250.57014 420.29419 252.71846 419.41937 c
254.86676 418.54456 255.89914 416.09384 255.02434 413.94553 c
f
0 J
0 j
[] 0 d
1 0 0 -1 -115 483 cm
370.02432 69.054466 m
369.14954 71.202766 366.69879 72.235146 364.55051 71.360344 c
362.40219 70.485535 361.36981 68.034805 362.24463 65.886497 c
363.11942 63.73819 365.57016 62.705814 367.71844 63.580624 c
369.86676 64.455429 370.89914 66.906158 370.02432 69.054466 c
S
CM
405.9624 40.338894 m
406.83722 42.487202 409.28793 43.519577 411.43625 42.644772 c
413.58456 41.769966 414.61694 39.319237 413.74213 37.170933 c
412.86731 35.022621 410.4166 33.990246 408.26828 34.865055 c
406.12 35.739861 405.08762 38.19059 405.9624 40.338894 c
f
1 0 0 -1 -115 483 cm
520.9624 442.6611 m
521.83722 440.51279 524.28796 439.48044 526.43628 440.35522 c
528.58453 441.23004 529.61694 443.68076 528.74213 445.82907 c
527.86731 447.97739 525.41663 449.00977 523.26831 448.13495 c
521.12 447.26013 520.08759 444.80942 520.9624 442.6611 c
S
1 J
1 j
[
12
12
] 0 d
0.60000002 i
523.73779 440.92462 m
412.43918 178.64647 l
S
0 i
CM
299.6925 306.64609 m
298.82333 304.49548 296.37534 303.45667 294.22473 304.32581 c
292.07416 305.19498 291.03534 307.64297 291.90448 309.79358 c
292.77365 311.94418 295.22165 312.983 297.37225 312.11383 c
299.52283 311.24469 300.56165 308.79666 299.6925 306.64609 c
f
0 J
0 j
[] 0 d
1 0 0 -1 -115 483 cm
414.6925 176.35393 m
413.82333 178.50452 411.37534 179.54333 409.22473 178.67418 c
407.07416 177.80502 406.03534 175.35703 406.90448 173.20642 c
407.77365 171.05582 410.22165 170.01701 412.37225 170.88617 c
414.52283 171.75533 415.56165 174.20332 414.6925 176.35393 c
S
CM
406.48447 39.782825 m
407.35361 41.933426 409.80161 42.97224 411.95221 42.103088 c
414.10281 41.233932 415.14163 38.785927 414.27249 36.63533 c
413.40332 34.484726 410.95532 33.445911 408.80472 34.315067 c
406.65411 35.184223 405.6153 37.632229 406.48447 39.782825 c
f
1 0 0 -1 -115 483 cm
521.48444 443.21716 m
522.35364 441.06659 524.80164 440.02777 526.95221 440.89691 c
529.10284 441.76608 530.14166 444.21408 529.27246 446.36469 c
528.40332 448.51526 525.95532 449.55408 523.80475 448.68494 c
521.65411 447.81577 520.6153 445.36777 521.48444 443.21716 c
S
1 J
1 j
[
12
12
] 0 d
0.60000002 i
517.76544 439.2775 m
294.61398 121.93407 l
S
0 i
CM
181.33574 363.78049 m
180.9375 361.49533 178.76219 359.9657 176.47704 360.36392 c
174.19188 360.76215 172.66223 362.93747 173.06046 365.22263 c
173.45869 367.50778 175.634 369.03741 177.91916 368.63919 c
180.20432 368.24097 181.73396 366.06564 181.33574 363.78049 c
f
0 J
0 j
[] 0 d
1 0 0 -1 -115 483 cm
296.33572 119.21951 m
295.9375 121.50466 293.76218 123.03432 291.47702 122.63609 c
289.19189 122.23785 287.66223 120.06253 288.06046 117.77738 c
288.45868 115.49223 290.634 113.96257 292.91916 114.36081 c
295.20432 114.75904 296.73398 116.93436 296.33572 119.21951 c
S
CM
401.0437 41.007961 m
401.44193 43.293114 403.61725 44.822765 405.9024 44.424534 c
408.18753 44.026302 409.71719 41.850979 409.31897 39.56583 c
408.92075 37.280674 406.74542 35.751022 404.46027 36.149254 c
402.17511 36.547489 400.64545 38.722809 401.0437 41.007961 c
f
1 0 0 -1 -115 483 cm
516.0437 441.99203 m
516.44189 439.70688 518.61725 438.17725 520.9024 438.57547 c
523.18756 438.97369 524.71722 441.14902 524.31897 443.43417 c
523.92072 445.71933 521.74542 447.24899 519.46027 446.85074 c
517.17511 446.45251 515.64545 444.27719 516.0437 441.99203 c
S
1 J
1 j
[
12
12
] 0 d
0.60000002 i
526.31848 440.84799 m
446.61774 16.291327 l
S
0 i
CM
334.30963 468.46567 m
333.00021 466.55099 330.38657 466.06033 328.47189 467.36975 c
326.55725 468.67917 326.06659 471.29282 327.37601 473.20749 c
328.68542 475.12213 331.29907 475.61279 333.21375 474.30338 c
335.12839 472.99396 335.61905 470.38031 334.30963 468.46567 c
f
0 J
0 j
[] 0 d
1 0 0 -1 -115 483 cm
449.30963 14.534345 m
448.00021 16.449007 445.38657 16.939657 443.47189 15.630242 c
441.55725 14.320827 441.06659 11.707183 442.37601 9.7925205 c
443.68542 7.8778543 446.29907 7.3872042 448.21375 8.6966228 c
450.12839 10.006038 450.61905 12.619682 449.30963 14.534345 c
S
CM
408.62662 40.395023 m
409.93604 42.309685 412.54968 42.800335 414.46432 41.490921 c
416.379 40.181507 416.86966 37.56786 415.56024 35.653198 c
414.25082 33.738533 411.63718 33.247883 409.7225 34.557301 c
407.80786 35.866718 407.3172 38.480362 408.62662 40.395023 c
f
1 0 0 -1 -115 483 cm
523.62659 442.60498 m
524.93604 440.69031 527.54968 440.19968 529.46436 441.50906 c
531.37903 442.81848 531.86963 445.43213 530.56024 447.3468 c
529.25079 449.26147 526.63721 449.75211 524.72253 448.44269 c
522.80786 447.13327 522.3172 444.51965 523.62659 442.60498 c
S
0.68627453 0.32156864 0.87058824 sc
1 0 0 -1 37.050755 300.19177 cm
/F1.1[ 20 0 0 -20 0 0]sf
-11.401367 7 m
(#$)[ 11.679688 0.000000 ] xS
1 0 0 -1 137.05075 367 cm
-11.401367 7 m
(#$)[ 11.679688 0.000000 ] xS
1 0 0 -1 166.05075 384.63907 cm
-8.8916016 7 m
(%$)[ 6.660156 0.000000 ] xS
1 0 0 -1 236.39848 432 cm
-11.401367 7 m
(#$)[ 11.679688 0.000000 ] xS
1 0 0 -1 282.94925 462 cm
-8.8916016 7 m
(%$)[ 6.660156 0.000000 ] xS
1 0 0 -1 316.05075 487 cm
-8.8916016 7 m
(%$)[ 6.660156 0.000000 ] xS
0 0.47843137 1 sc
1 0 0 -1 54.050755 261 cm
-5.5615234 7 m
(&)s
1 0 0 -1 131.05075 303.27814 cm
-5.5615234 7 m
($)s
1 0 0 -1 182.05075 337.27814 cm
-5.5615234 7 m
(')s
1 0 0 -1 229.45255 367 cm
-5.5615234 7 m
($)s
1 0 0 -1 283.05075 401 cm
-5.5615234 7 m
(')s
1 0 0 -1 320.05075 423.42896 cm
-5.5615234 7 m
($)s
1 0 0 -1 357.05075 440.51645 cm
-5.5615234 7 m
(&)s
/Cs1 SC
0 sc
1 0 0 -1 83.949242 76 cm
-30.014648 7 m
(\(\)*++,)[ 10.000000 10.000000 6.660156 11.123047 11.123047 0.000000 ] xS
1 0 0 -1 54.050755 17 cm
-5.5615234 7 m
(-)s
1 0 0 -1 415.05075 17 cm
-7.2216797 7 m
(")s
ep
end
%%Trailer
%%EOF
