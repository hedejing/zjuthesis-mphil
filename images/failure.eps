%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 452.000000 465.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.14.1 (Build 18B75) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 452 465
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 452 465
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: Helvetica
%!FontType1-1.0: Helvetica 1.0000.0.0000
14 dict begin/FontName /Helvetica def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /p put
dup 34 /R put
dup 35 /P put
dup 36 /L put
dup 37 /equal put
dup 38 /zero put
dup 39 /s put
dup 40 /c put
dup 41 /r put
dup 42 /e put
dup 43 /n put
dup 44 /two put
dup 45 /space put
dup 46 /greater put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[2048 -1947 1 index div -985 2 index div 2961 3 index div 2297 5 -1 roll div]cvx def
/sfnts [<


20457D691844B001602DB800322CB800312A2DB800332C4B20B003265358B0801BB040598A8A20B0032653582321B0C08A8A1B8A235920B0032653582321B801008A8A1B8A235920B0032653582321B801408A8A1B8A235920B80003265358B0032545B8018050582321B8018023211BB003254523212321591B2159442DB800342C4B535845441B2121592DB800352C4BB800095058B101018E59B801FF85B800441DB9000900035F5E2DB800362C2020456944B001602DB800372CB800362A212DB800382C2046B003254652582359208A208A49648A204620686164B004254620686164525823658A592F20B00053586920B000545821B040591B6920B000545821B0406559593A2DB800392C2046B00425465258238A592046206A6164B0042546206A61645258238A592FFD2DB8003A2C4B20B0032650585158B080441BB04044591B21212045B0C05058B0C0441B2159592DB8003B2C2020456944B001602020457D691844B001602DB8003C2CB8003B2A2DB8003D2C4B20B003265358B0801BB040598A8A20B0032653582321B0C08A8A1B8A235920B0032653582321B801008A8A1B8A235920B0032653582321B801408A8A1B8A235920B80003265358B0032545B8018050582321B8018023211BB003254523212321591B2159442DB8003E2C4B535845441B2121592DB8003F2C4BB800095058B101018E59B801FF85B800441DB9000900035F5E2DB800402C2020456944B001602DB800412CB800402A212DB800422C2046B003254652582359208A208A49648A204620686164B004254620686164525823658A592F20B00053586920B000545821B040591B6920B000545821B0406559593A2DB800432C2046B00425465258238A592046206A6164B0042546206A61645258238A592FFD2DB800442C4B20B0032650585158B080441BB04044591B21212045B0C05058B0C0441B2159592DB800452C2020456944B001602020457D691844B001602DB800462CB800452A2DB800472C4B20B003265358B0801BB040598A8A20B0032653582321B0C08A8A1B8A235920B0032653582321B801008A8A1B8A235920B0032653582321B801408A8A1B8A235920B80003265358B0032545B8018050582321B8018023211BB003254523212321591B2159442DB800482C4B535845441B2121592DB800492C4BB800095058B101018E59B801FF85B800441DB9000900035F5E2DB8004A2C2020456944B001602DB8004B2CB8004A2A212DB8004C2C2046B003254652582359208A208A49648A204620686164B004254620686164525823658A592F20B00053586920B000545821B040591B6920B000545821B0406559593A2DB8004D2C2046B00425465258238A592046206A6164B0042546206A61645258238A592FFD2DB8004E2C4B20B0032650585158





00>] def
/CharStrings 16 dict dup begin
/.notdef 0 def
/space 1 def
/zero 2 def
/two 3 def
/equal 4 def
/greater 5 def
/L 6 def
/P 7 def
/R 8 def
/c 9 def
/e 10 def
/n 11 def
/p 12 def
/r 13 def
/s 14 def
/u20B8 15 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.00048828125 0 0 0.00048828125 0 0 ] def
/FontBBox{-1947 -985 2961 2297}def
/UniqueID 4072461 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C5586B741EEB93F3C73016EC16BFF283758900903D203992EFC8BAFAF13579C602F38C91B2145C684A74C06611B00C1FA345EA5AA002A80B57843F114AFEA926699F2E8022F1D1331DFE6254733147DDB94E77EAC1EAD51170D66C31355D7FFC56C96F93071D2CDD5F60123EB639124E6FA384D09402728516BADCC77378B258B448C4E6A3F1BEB963171E0A57B529B7AF9E2DECB511A9918E2D3B8BABF77FDB22E480CD06053D035625D627E83AB468FFE68AE7B231720C049BA9F74F6BF781153C8FF23EBD9B1C2382B47DE61DA1D607D33C40866883567A637AC70EC85A2155FD11127A3BBD4AE10A3B032B73359EC8A62ECA75E2FEEFDA8EBFA7DA836129917934311E5B690D134605FA30FF1B766E3D00A859C66BA646AF6E9927C0334239FD80F5B15AB01AE0717A04DF207411184D67D07AB8D650B8244921716785898689E87C095858DCAD7C43FD52D48FBFB43299A1A33F9440E2DBDED72BA4F562AAED6F4705F4A89988A31F693BBF7A85BB751562B05D36569C8FFC39FC63E2A2BC5CDC68717A3825B6BDD06A7FF7D601B9EAC4ACB22C67A5920E3EE705E050414EFBDC26F75B0FA9ADDB53C0B8ADAB8C71238846C86CFA818CC36EE548B4F90AAFE3C2F23F8C0D34A51EE3CC0BC7D53EEED091CAEC26290A1B25D76C5701E25AEDA7EE1A3AA4B4881276E1E713661EB30814FE887B47F942B36581624E2B1387094B5838A6C117EC2988E75A8E97EC6E31FE072C50FFCE28588A24D8C59E6C8FF37C1D5111DEA051A0510DE24FE4822E9D31D948584E2AE69428D7D50698E89705E56184
04C8B285638D8872A798A5259B2FBC3ABD3D184B2287F65038BBC39A6A315719C9C450BC0BB68C40EE302660E95E5C64E166CA8948F04243259DAE2544F958D075D4F013407C8267F7E08703A6350E3C283E91CBCF41CB057343A236C95441C46953E62BADB46EE81D9FC641A9F667CFF02DAE4C0CE1ACDB098A212886BA295C1D84874EA21A564740353BE67A23542D08383F2FB6DAC4D9DE02AD84EB773780A0091E33DBB207A99426FFC0F8EAA3CA4E96C87F108F072FC2781753790E97904EE2B438455EADA0AA87E5EFD5AEFED14069295F7D2C173B398A38BE7ADA1F847717E255D49E2F293DF827C6B1425A1CAF185DFA6A1CC91AE60A902FC29AF7D5D3754207CA6DC731D36D71A29336A2D60D4C5C89B3518B3CE9D4A324B3901B78C36F5D4B4766CA22DED088C550DFCF707D1E4C27EFCCD47B85DCA712EFC5D1645163CBAFDC264A0AB884DEA0007B6B95C15B543D4E624D2477701F670A04B1AC5951FF1DAB58CEBB5EDF547895290AA915BA5E1F73CB0D3839B39E4DE757AAF55FA25B9A9B0B3AC7405B4D06EC72D2E7F57F68733A4E3801723A9290797D89BF08F5C83DA02EB41D8C50839B0678BAF906B7065E925FF6CF2C966B9CC07394CCD327E691E08DE86BC47808FDD609EBA36437588675D1021DFC705A6FA1795E7A1C56CDA8C8FCA517426482C0F45C6AD7E9C2EF9750E2DFF393D05ADA5BC59B7DFC2FAB2DB25B0965C122DEDE601CCED81C6F4BC8A237702F1AC6EFACBFB503A856C58F0199A124DABB6C8ECE798969E3F08E123195F0CCBF20B43E5EAE58E09DDBF83E517B44B2A80157EB123E556E53E472104A597B21C0AE5D4D15FE41D4D3482C0F7B449589F03582ECF1CB5A3BF0DF012A2644F38C2C1D5293740368E38193B8AE565A2401BC1AAF9835EB534A37E5835DA9EE8CA93F684BA383E262E7A180037E49E7D028BBC79584DC5882B0BF8D7E2EB89EFA855AEC1C4DED1B0631B11457F0D2D13CFF9B01BA99C0C09225E9812FD142D5D4BB2A637E5C074EC0984C4D9251AC7BD1F42835081D57050237AA9AF7D8CCB1F9C1CE68F6E8422B51F6B65AFE4C65871A40A4F70B2E47D396326E8CF65E3CD1EE3D88FC6249ACA9AD814EEB9D7DAA662BBA110A6D573E5C1DB404A98E18A4C87BDBF2B17F091D733ED55E17099B10AD5ACB0CFAD77F30B5893554D9595372D400364A417D9CBBB4FC422C03CA3AD510B4ABA65873009D38EE04A4DCEF502188AB5920F4F9F8EB4F6BE653A9BFBB46E266FADD1AD92FB510D97731C2D5487DB3CCBB6CBC801C582A385FEA17C82480A69BC2EC42462CFB70D48A3D35878456F05F2643D9C7F3344A6641E159583AFED9D0860CA447835A6B3EC3F188814C9642A8F35EF132ED85FD2701243FC8E08DC63D87BAF72AC46F9DA8993578865AEF2372685E9565E987EB7A6EE7
105E7F191406109C4912E0FD713DD5069C780020F79FA347A995268589910CB6FFAEAFFED495F19328FD06DC3909E7542BC053C8AABFBA0228450C72B4715CF78932BA115090090F882CFB682960C01CA0A7929517D52BE862C028EC6622F88B98B5F7E836100E954687E9C73FB1D3269699BA76650109BE3F5500B6B10576C794E3EDB720813033FA52113CAB1DE182542C76B7F13EBC927FEE49193ED3FC434F4FAD47CAD58654BB4E6DF18228295353704177C8A0A01997C008F3D22F6129D5075FA88A491155C871631302650F01962BD03AF606197E8DA8DACBED12DF92BFCB8B57187C0440ACF66AE8DEE4B6A5EACF98D7E61C46C3DCE93512A4C7B3F048515C4145B6322963CF161E073A84E48FE2E6405A7EBF0A495574F6B030D739503318A8D06FDE8DFC4B36BB8ABF5ED0D606B8E98C03BDD4263CA3C4E4F0D26293D7BD186895467AA9FA52670F1FA06077142E8761046F64729EB180436136B5B1D28D2EEC266BA14F127B0D08C74961CF7943D7A42B13F896E7E67F3B7B17D2118AC5D867A44076B1114EBEFDEFA9CF5B25505CE04725CF4F94E16D9F01BA735C3CFF7BF9B9ED33B3A82A8808038EB9A53742767B81E0FA0948FB45779C93EEAF767C259C7D10AB534FAD89D6F972692226962924640A82F80427E78BEA793B5305D7DF019E66AF659B58B1525011A28E8D58C07241F18D71A16E82DD12115F9170151C11B57B4DD9CEA3A8DDF56FB20311BAA3AB9CB5D51FC2682EB777938337
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/Helvetica cguidfix
/F1.1/Helvetica renmfont
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
 exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs2 exch/ColorSpace dr pop
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs3 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
1 sc
q
0 0 452 465 rc
0 465 m
452 465 l
452 0 l
0 0 l
h
f
/Cs2 SC
1 1 1 sc
-1345.5446 1403.6139 m
2690.0991 1403.6139 l
2690.0991 -1412.2278 l
-1345.5446 -1412.2278 l
h
-1345.5446 1403.6139 m
f
419.79086 334.95535 m
443.46625 311.28009 443.46625 272.89493 419.79086 249.21967 c
396.1156 225.54428 357.73044 225.54428 334.05518 249.21967 c
310.37979 272.89493 310.37979 311.28009 334.05518 334.95535 c
357.73044 358.63074 396.1156 358.63074 419.79086 334.95535 c
f
3 w
1 J
1 j
0.60000002 i
/Cs3 SC
0.22082174 0.60102326 0.16552565 sc
1 0 0 -1 -121 483 cm
540.79083 148.04465 m
564.46625 171.71991 564.46625 210.10507 540.79083 233.78033 c
517.1156 257.45572 478.73044 257.45572 455.05518 233.78033 c
431.37979 210.10507 431.37979 171.71991 455.05518 148.04465 c
478.73044 124.36926 517.1156 124.36926 540.79083 148.04465 c
S
/Cs2 SC
0 0 0 sc
548.78271 142.64037 m
560.71362 187.3376 l
555.336 236.93396 l
483.81052 262 l
430 218.65263 l
437.29868 151.38948 l
489.78946 120 l
548.08423 142.42105 l
S
0 i
1 1 1 sc
CM
277.57507 350.00412 m
258.27997 420.62387 191.61824 447.55695 128.68188 410.16089 c
65.745445 372.76517 30.367449 285.20154 49.662891 214.582 c
68.958008 143.96225 135.61974 117.02917 198.55608 154.42525 c
261.49252 191.82095 296.87051 279.38458 277.57507 350.00412 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -121 483 cm
398.57507 132.99588 m
379.27997 62.376129 312.61823 35.443043 249.68188 72.839119 c
186.74544 110.23484 151.36745 197.79845 170.66289 268.418 c
189.95801 339.03775 256.61972 365.97083 319.55609 328.57477 c
382.49252 291.17905 417.87051 203.61543 398.57507 132.99588 c
S
0 i
1 1 1 sc
CM
40.898487 433 m
227.34773 433 l
227.34773 189 l
40.898487 189 l
h
40.898487 433 m
f
43 240.13162 m
130.44925 240.13162 l
130.44925 155.3125 l
43 155.3125 l
h
43 240.13162 m
f
[
12
12
] 0 d
0.60000002 i
0.64705902 0.64705902 0.64705902 sc
1 0 0 -1 -121 483 cm
169.86537 441.70117 m
316.03311 333.87695 l
S
0 i
CM
197.78606 147.46335 m
195.49246 147.8096 193.91382 149.94963 194.26006 152.24324 c
194.60631 154.53683 196.74635 156.11548 199.03995 155.76924 c
201.33356 155.42299 202.9122 153.28296 202.56595 150.98935 c
202.2197 148.69574 200.07967 147.1171 197.78606 147.46335 c
f
0 J
0 j
[] 0 d
1 0 0 -1 -121 483 cm
318.78607 335.53665 m
316.49246 335.1904 314.91382 333.05038 315.26007 330.75677 c
315.60632 328.46317 317.74634 326.88452 320.03995 327.23077 c
322.33356 327.57703 323.9122 329.71704 323.56595 332.01065 c
323.2197 334.30426 321.07965 335.8829 318.78607 335.53665 c
S
CM
46.112427 42.958527 m
48.406029 42.612274 49.984673 40.472244 49.638424 38.178638 c
49.292175 35.885036 47.152142 34.306389 44.85854 34.652641 c
42.56493 34.99889 40.986286 37.13892 41.332539 39.432526 c
41.678791 41.726128 43.818825 43.304775 46.112427 42.958527 c
f
1 0 0 -1 -121 483 cm
167.11243 440.04147 m
169.40604 440.38773 170.98468 442.52774 170.63843 444.82135 c
170.29218 447.11496 168.15215 448.6936 165.85854 448.34735 c
163.56493 448.0011 161.98628 445.86108 162.33253 443.56747 c
162.67879 441.27386 164.81882 439.69522 167.11243 440.04147 c
S
4 w
1 J
1 j
0.60000002 i
0 0 0 sc
164 449 m
529.17358 446.79803 l
S
3 w
163.89848 392.99609 m
538.8985 391 l
S
/Cs1 SC
0 sc
0 i
1 0 0 -1 414.05075 76 cm
/F1.1[ 20 0 0 -20 0 0]sf
-10.977783 4.5 m
(!)s
/F1.1[ 15 0 0 -15 0 0]sf
0.14526367 11.5 m
(")s
1 0 0 -1 178.05075 180.5 cm
/F1.1[ 20 0 0 -20 0 0]sf
-10.841064 4.5 m
(#)s
/F1.1[ 15 0 0 -15 0 0]sf
2.4987793 11.5 m
($)s
5 w
0.60000002 i
/Cs2 SC
0.89803898 0.49019599 0.17254899 sc
1 0 0 -1 -121 483 cm
161.89848 271.55554 m
374.26471 59.189342 l
S
0 i
CM
263.44705 433.99298 m
249.44632 427.62903 l
257.08307 419.99228 l
h
263.44705 433.99298 m
f
0 J
0 j
1 0 0 -1 -121 483 cm
384.44705 49.007004 m
370.44632 55.370964 l
378.08307 63.007717 l
h
384.44705 49.007004 m
S
3 w
1 J
1 j
[
12
12
] 0 d
0.60000002 i
0.64705902 0.64705902 0.64705902 sc
525.30707 442.06058 m
188.41992 258.46448 l
S
0 i
CM
67.760925 227.73193 m
68.416252 225.50684 67.1437 223.17178 64.91861 222.51646 c
62.693512 221.86113 60.358456 223.13368 59.703129 225.35878 c
59.047798 227.58388 60.320351 229.91893 62.545448 230.57426 c
64.770546 231.22958 67.105598 229.95703 67.760925 227.73193 c
f
0 J
0 j
[] 0 d
1 0 0 -1 -121 483 cm
188.76093 255.26807 m
189.41624 257.49316 188.14371 259.82822 185.91861 260.48355 c
183.69351 261.13885 181.35846 259.8663 180.70312 257.6412 c
180.04781 255.41612 181.32034 253.08107 183.54546 252.42574 c
185.77054 251.77042 188.10561 253.04297 188.76093 255.26807 c
S
CM
403.96609 37.743011 m
403.31076 39.968109 404.58331 42.303158 406.80841 42.958488 c
409.03351 43.613815 411.36856 42.341263 412.0239 40.116169 c
412.67923 37.891068 411.40668 35.556019 409.18158 34.900692 c
406.95648 34.245361 404.62143 35.517918 403.96609 37.743011 c
f
1 0 0 -1 -121 483 cm
524.96606 445.25699 m
524.31079 443.03189 525.58331 440.69684 527.80841 440.0415 c
530.03351 439.38617 532.36859 440.65875 533.02386 442.88382 c
533.6792 445.10892 532.40668 447.44397 530.18158 448.0993 c
527.95648 448.75464 525.6214 447.48209 524.96606 445.25699 c
S
1 J
1 j
[
12
12
] 0 d
0.60000002 i
526.31464 443.04678 m
323.00766 331.82974 l
S
0 i
CM
202.35373 154.36612 m
203.00552 152.13998 201.72926 149.80696 199.50313 149.15517 c
197.27699 148.50337 194.94397 149.77963 194.29218 152.00577 c
193.64038 154.2319 194.91664 156.56493 197.14278 157.21672 c
199.36891 157.86852 201.70193 156.59225 202.35373 154.36612 c
f
0 J
0 j
[] 0 d
1 0 0 -1 -121 483 cm
323.35373 328.63388 m
324.00552 330.86002 322.72925 333.19302 320.50314 333.84482 c
318.27701 334.49661 315.94397 333.22037 315.29218 330.99423 c
314.64038 328.7681 315.91663 326.43506 318.14276 325.78326 c
320.3689 325.13147 322.70193 326.40775 323.35373 328.63388 c
S
CM
404.96857 36.757359 m
404.31677 38.983494 405.59302 41.316517 407.81915 41.968315 c
410.04529 42.620106 412.37833 41.343845 413.03012 39.117714 c
413.68192 36.891575 412.40564 34.558552 410.1795 33.906757 c
407.95337 33.254963 405.62033 34.531227 404.96857 36.757359 c
f
1 0 0 -1 -121 483 cm
525.96857 446.24265 m
525.31677 444.01651 526.59302 441.68347 528.81915 441.03168 c
531.04529 440.37988 533.3783 441.65616 534.03009 443.88229 c
534.68188 446.10843 533.40564 448.44144 531.1795 449.09323 c
528.95337 449.74503 526.62036 448.46878 525.96857 446.24265 c
S
1 J
1 j
[
12
12
] 0 d
0.60000002 i
533.10675 440.69571 m
375.1203 71.329353 l
S
0 i
CM
256.3671 413.9696 m
255.50406 411.81653 253.05904 410.77075 250.90596 411.63376 c
248.7529 412.49677 247.70709 414.9418 248.57011 417.09488 c
249.43314 419.24796 251.87816 420.29373 254.03123 419.43073 c
256.1843 418.56769 257.2301 416.12268 256.3671 413.9696 c
f
0 J
0 j
[] 0 d
1 0 0 -1 -121 483 cm
377.3671 69.030396 m
376.50406 71.183464 374.05902 72.229263 371.90598 71.366241 c
369.7529 70.503227 368.70709 68.058189 369.57013 65.905128 c
370.43314 63.752052 372.87817 62.706261 375.03125 63.569279 c
377.1843 64.432297 378.2301 66.877335 377.3671 69.030396 c
S
CM
409.85992 40.005341 m
410.72296 42.158413 413.16797 43.204205 415.32104 42.341187 c
417.47412 41.478168 418.51993 39.033134 417.65689 36.88007 c
416.79388 34.726997 414.34885 33.681202 412.19577 34.544224 c
410.04272 35.407242 408.99692 37.852276 409.85992 40.005341 c
f
1 0 0 -1 -121 483 cm
530.85992 442.99466 m
531.72296 440.84158 534.16797 439.79581 536.32104 440.65881 c
538.47412 441.52182 539.5199 443.96686 538.65692 446.11993 c
537.79388 448.27301 535.34888 449.31879 533.1958 448.45578 c
531.04272 447.59274 529.99689 445.14774 530.85992 442.99466 c
S
1 J
1 j
[
12
12
] 0 d
0.60000002 i
534.09357 441.70132 m
398.30521 125.49841 l
S
0 i
CM
279.54868 359.8038 m
278.68875 357.64948 276.24524 356.60016 274.09094 357.46005 c
271.93661 358.31998 270.8873 360.76349 271.74719 362.91779 c
272.60712 365.07211 275.0506 366.12143 277.20493 365.26154 c
279.35925 364.40164 280.40857 361.9581 279.54868 359.8038 c
f
0 J
0 j
[] 0 d
1 0 0 -1 -121 483 cm
400.54868 123.1962 m
399.68875 125.35052 397.24524 126.39984 395.09094 125.53994 c
392.93661 124.68003 391.8873 122.23652 392.74719 120.08221 c
393.60712 117.92789 396.0506 116.87856 398.20493 117.73846 c
400.35925 118.59837 401.40857 121.04189 400.54868 123.1962 c
S
CM
410.8501 38.996456 m
411.71002 41.150772 414.15353 42.2001 416.30783 41.340195 c
418.46216 40.480293 419.51147 38.036774 418.65158 35.882462 c
417.79169 33.728142 415.34818 32.678814 413.19385 33.538723 c
411.03952 34.398628 409.9902 36.842144 410.8501 38.996456 c
f
1 0 0 -1 -121 483 cm
531.8501 444.00354 m
532.71002 441.84921 535.1535 440.7999 537.30786 441.65979 c
539.46216 442.51971 540.51147 444.96323 539.65155 447.11755 c
538.79169 449.27185 536.34814 450.3212 534.19385 449.46127 c
532.03955 448.60138 530.99017 446.15787 531.8501 444.00354 c
S
5 w
1 J
1 j
0.60000002 i
0.89803898 0.49019599 0.17254899 sc
324 328 m
324 328 372.86609 294.06503 393.42709 235.55421 c
406.12912 199.40778 404.33878 164.38263 401.11441 142.88843 c
S
0 i
CM
277.1304 354.19235 m
274.8331 338.98572 l
285.39844 341.22473 l
h
277.1304 354.19235 m
f
0 J
0 j
1 0 0 -1 -121 483 cm
398.1304 128.80763 m
395.8331 144.0143 l
406.39844 141.77527 l
h
398.1304 128.80763 m
S
4 w
1 J
1 j
0.60000002 i
0.89803922 0.49019608 0.17254902 sc
433 392.22565 m
493.35437 391.16953 l
S
0 i
CM
385.1524 92.054428 m
372.27039 96.629745 l
372.43835 87.031212 l
h
385.1524 92.054428 m
f
0 J
0 j
1 0 0 -1 -121 483 cm
506.1524 390.94556 m
493.27039 386.37024 l
493.43835 395.96878 l
h
506.1524 390.94556 m
S
3 w
1 J
1 j
[
12
12
] 0 d
0.60000002 i
0.64705902 0.64705902 0.64705902 sc
534.58795 442.2467 m
514.22791 395.34296 l
S
0 i
CM
395.46234 89.96801 m
394.61087 87.810349 392.17148 86.751457 390.01382 87.602913 c
387.85614 88.454369 386.79727 90.893761 387.64871 93.051422 c
388.50018 95.209099 390.93954 96.26799 393.09723 95.416527 c
395.25488 94.565063 396.31378 92.125679 395.46234 89.96801 c
f
0 J
0 j
[] 0 d
1 0 0 -1 -121 483 cm
516.46234 393.03198 m
515.61084 395.18967 513.17151 396.24854 511.01382 395.39709 c
508.85614 394.54562 507.79727 392.10623 508.64871 389.94858 c
509.50018 387.79089 511.93954 386.73203 514.09723 387.58347 c
516.25488 388.43494 517.31378 390.87433 516.46234 393.03198 c
S
CM
411.35355 38.442314 m
412.20499 40.599983 414.64438 41.658875 416.80206 40.807415 c
418.95972 39.955956 420.01862 37.516567 419.16714 35.358902 c
418.31567 33.201233 415.87631 32.142342 413.71863 32.993801 c
411.56097 33.845261 410.50208 36.284653 411.35355 38.442314 c
f
1 0 0 -1 -121 483 cm
532.35352 444.55768 m
533.20502 442.40002 535.64441 441.34113 537.80206 442.1926 c
539.95972 443.04404 541.01862 445.48343 540.16718 447.64108 c
539.31567 449.79877 536.87628 450.85767 534.71863 450.0062 c
532.56097 449.15472 531.50208 446.71536 532.35352 444.55768 c
S
1 J
1 j
[
12
12
] 0 d
0.60000002 i
527.46606 441.54489 m
436.24173 393.58646 l
S
0 i
CM
315.53482 92.614677 m
316.22339 90.399635 314.98593 88.045807 312.7709 87.357239 c
310.55585 86.668686 308.20203 87.906143 307.51346 90.121178 c
306.82489 92.33622 308.06235 94.690056 310.2774 95.378616 c
312.49243 96.067177 314.84628 94.829712 315.53482 92.614677 c
f
0 J
0 j
[] 0 d
1 0 0 -1 -121 483 cm
436.53482 390.38531 m
437.22339 392.60037 435.98593 394.95419 433.7709 395.64276 c
431.55585 396.33133 429.20203 395.09384 428.51346 392.87881 c
427.82489 390.66379 429.06235 388.30994 431.2774 387.62137 c
433.49243 386.93283 435.84628 388.17029 436.53482 390.38531 c
S
CM
406.17291 38.253956 m
405.48438 40.468998 406.72183 42.82283 408.93686 43.511395 c
411.15189 44.199951 413.50574 42.96249 414.19431 40.747456 c
414.88284 38.532413 413.64539 36.178577 411.43036 35.490017 c
409.21533 34.80146 406.86148 36.038921 406.17291 38.253956 c
f
1 0 0 -1 -121 483 cm
527.17291 444.74603 m
526.48438 442.53101 527.7218 440.17719 529.93683 439.48862 c
532.15192 438.80005 534.50574 440.03751 535.19427 442.25253 c
535.88287 444.46759 534.64539 446.82141 532.43036 447.50998 c
530.21533 448.19855 527.86145 446.96109 527.17291 444.74603 c
S
1 J
1 j
[
12
12
] 0 d
0.60000002 i
534.57507 442.19498 m
433.40573 207.21172 l
S
0 i
CM
314.64706 278.09259 m
313.78915 275.93747 311.34662 274.88586 309.1915 275.74374 c
307.03641 276.60165 305.9848 279.04419 306.84268 281.19931 c
307.70059 283.35443 310.14313 284.40604 312.29825 283.54813 c
314.45334 282.69022 315.50494 280.24768 314.64706 278.09259 c
f
0 J
0 j
[] 0 d
1 0 0 -1 -121 483 cm
435.64706 204.90742 m
434.78915 207.06255 432.34662 208.11414 430.1915 207.25626 c
428.03641 206.39835 426.9848 203.95581 427.84268 201.8007 c
428.70059 199.64558 431.14313 198.59398 433.29825 199.45187 c
435.45334 200.30977 436.50494 202.7523 435.64706 204.90742 c
S
CM
411.33377 38.500725 m
412.19168 40.655838 414.63422 41.707443 416.78934 40.849548 c
418.94443 39.99165 419.99603 37.54911 419.13815 35.393997 c
418.28024 33.23888 415.83771 32.187275 413.68259 33.045174 c
411.5275 33.903072 410.47589 36.345612 411.33377 38.500725 c
f
1 0 0 -1 -121 483 cm
532.3338 444.49927 m
533.19165 442.34415 535.63422 441.29257 537.78931 442.15045 c
539.94446 443.00836 540.99603 445.4509 540.13812 447.60599 c
539.28027 449.76111 536.83771 450.81271 534.68262 449.95483 c
532.52747 449.09692 531.47589 446.65439 532.3338 444.49927 c
S
1 J
1 j
[
12
12
] 0 d
0.60000002 i
535.05573 442.68903 m
444.10706 232.04163 l
S
0 i
CM
325.34601 253.26498 m
324.49033 251.10898 322.04886 250.05487 319.89288 250.91054 c
317.73688 251.76622 316.68277 254.20769 317.53845 256.36368 c
318.3941 258.51968 320.83557 259.57379 322.99158 258.71811 c
325.14755 257.86243 326.20169 255.42097 325.34601 253.26498 c
f
0 J
0 j
[] 0 d
1 0 0 -1 -121 483 cm
446.34601 229.73502 m
445.49033 231.89102 443.04886 232.94513 440.89288 232.08946 c
438.73688 231.23378 437.68277 228.79231 438.53845 226.63632 c
439.3941 224.48033 441.83557 223.42621 443.99158 224.28189 c
446.14755 225.13757 447.20169 227.57903 446.34601 229.73502 c
S
CM
411.8168 38.004391 m
412.67249 40.160385 415.11392 41.2145 417.26993 40.358822 c
419.42593 39.503143 420.48004 37.061684 419.62436 34.905693 c
418.76868 32.749691 416.32724 31.695576 414.17123 32.551258 c
412.01523 33.406937 410.96112 35.848396 411.8168 38.004391 c
f
1 0 0 -1 -121 483 cm
532.81677 444.99561 m
533.67249 442.8396 536.11395 441.78549 538.26996 442.64117 c
540.4259 443.49686 541.48004 445.93832 540.62439 448.0943 c
539.76868 450.25031 537.32721 451.30441 535.1712 450.44873 c
533.01526 449.59305 531.96112 447.15161 532.81677 444.99561 c
S
0.68627453 0.32156864 0.87058824 sc
1 0 0 -1 48.050755 249 cm
/F1.1[ 20 0 0 -20 0 0]sf
-11.401367 7 m
(%&)[ 11.679688 0.000000 ] xS
0 0.47843137 1 sc
1 0 0 -1 178.05075 286 cm
-5.5615234 7 m
(&)s
/Cs1 SC
0 sc
1 0 0 -1 77.949242 76 cm
-30.014648 7 m
('\(\)**+)[ 10.000000 10.000000 6.660156 11.123047 11.123047 0.000000 ] xS
1 0 0 -1 48.050755 17 cm
-5.5615234 7 m
($)s
1 0 0 -1 409.05075 17 cm
-7.2216797 7 m
(")s
1 0 0 -1 308.05075 76 cm
-9.732666 4.5 m
(!)s
/F1.1[ 15 0 0 -15 0 0]sf
1.3903809 11.5 m
($)s
1 0 0 -1 270.65851 395.5 cm
/F1.1[ 20 0 0 -20 0 0]sf
-12.086182 4.5 m
(#)s
/F1.1[ 15 0 0 -15 0 0]sf
1.2536621 11.5 m
(")s
1 J
1 j
0.60000002 i
/Cs2 SC
1 0.80000001 0 sc
1 0 0 -1 -121 483 cm
382.58228 111 m
461.52078 111 l
461.52078 137 l
382.58228 137 l
h
382.58228 111 m
S
1 0.23137255 0.1882353 sc
0 i
1 0 0 -1 308.05075 359 cm
/F1.1[ 20 0 0 -20 0 0]sf
-22.519531 7 m
(,-.-&)[ 11.123047 5.556641 11.679688 5.556641 0.000000 ] xS
ep
end
%%Trailer
%%EOF
